!%f90 -*- f90 -*-
python module _sparsekit ! in 
    interface  ! in :_sparsekit
        subroutine camub(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine camub
        subroutine caplb(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine caplb
        subroutine caplb1(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine caplb1
        subroutine caplsb(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 :: s
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine caplsb
        subroutine caplsb1(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 :: s
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine caplsb1
        subroutine capmbt(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine capmbt
        subroutine caplsbt(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 :: s
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine caplsbt
        subroutine cdiamua(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(nrow),depend(nrow) :: diag
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine cdiamua
        subroutine camudia(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(nrow),depend(nrow) :: diag
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine camudia
        subroutine caplsca(nrow,a,ja,ia,scal,iw) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 :: scal
            integer dimension(*) :: iw
        end subroutine caplsca
        subroutine capldia(nrow,job,a,ja,ia,diag,b,jb,ib,iw) ! in :_sparsekit:cblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(nrow),depend(nrow) :: diag
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer dimension(*) :: iw
        end subroutine capldia
        subroutine ccsrdns(nrow,ncol,a,ja,ia,dns,ndns,ierr) ! in :_sparsekit:cformats.f
            integer :: nrow
            integer :: ncol
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            integer :: ierr
        end subroutine ccsrdns
        subroutine cdnscsr(nrow,ncol,nzmax,dns,ndns,a,ja,ia,ierr) ! in :_sparsekit:cformats.f
            integer :: nrow
            integer :: ncol
            integer :: nzmax
            complex*8 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ierr
        end subroutine cdnscsr
        subroutine ccoocsr(nrow,nnz,a,ir,jc,ao,jao,iao) ! in :_sparsekit:cformats.f
            integer :: nrow
            integer :: nnz
            complex*8 dimension(*) :: a
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine ccoocsr
        subroutine ccoicsr(n,nnz,job,a,ja,ia,iwk) ! in :_sparsekit:cformats.f
            integer optional,check((len(iwk)-1)>=n),depend(iwk) :: n=(len(iwk)-1)
            integer optional,check(len(ja)>=nnz),depend(ja) :: nnz=len(ja)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            integer dimension(n + 1) :: iwk
        end subroutine ccoicsr
        subroutine ccsrcoo(nrow,job,nzmax,a,ja,ia,nnz,ao,ir,jc,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nzmax
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nnz
            complex*8 dimension(*) :: ao
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            integer :: ierr
        end subroutine ccsrcoo
        subroutine ccsrssr(nrow,a,ja,ia,nzmax,ao,jao,iao,ierr) ! in :_sparsekit:cformats.f
            integer :: nrow
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nzmax
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ierr
        end subroutine ccsrssr
        subroutine cssrcsr(job,value2,nrow,a,ja,ia,nzmax,ao,jao,iao,indu,iwk,ierr) ! in :_sparsekit:cformats.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            complex*8 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
            integer :: ierr
        end subroutine cssrcsr
        subroutine cxssrcsr(nrow,a,ja,ia,nzmax,ao,jao,iao,indu,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            complex*8 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow + 1),depend(nrow) :: indu
            integer :: ierr
        end subroutine cxssrcsr
        subroutine ccsrell(nrow,a,ja,ia,maxcol,coef,jcoef,ncoef,ndiag,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: maxcol
            complex*8 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            integer :: ierr
        end subroutine ccsrell
        subroutine cellcsr(nrow,coef,jcoef,ncoef,ndiag,a,ja,ia,nzmax,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nzmax
            integer :: ierr
        end subroutine cellcsr
        subroutine ccsrmsr(n,a,ja,ia,ao,jao,wk,iwk) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            complex*8 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine ccsrmsr
        subroutine cmsrcsr(n,a,ja,ao,jao,iao,wk,iwk) ! in :_sparsekit:cformats.f
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
            complex*8 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine cmsrcsr
        subroutine ccsrcsc(n,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: job
            integer :: ipos
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1),depend(n) :: iao
        end subroutine ccsrcsc
        subroutine ccsrcsc2(n,n2,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer optional,check((len(iao)-1)>=n2),depend(iao) :: n2=(len(iao)-1)
            integer :: job
            integer :: ipos
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n2 + 1) :: iao
        end subroutine ccsrcsc2
        subroutine ccsrlnk(n,a,ja,ia,link) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: link
        end subroutine ccsrlnk
        subroutine clnkcsr(n,a,jcol,istart,link,ao,jao,iao) ! in :_sparsekit:cformats.f
            integer optional,check(len(istart)>=n),depend(istart) :: n=len(istart)
            complex*8 dimension(*) :: a
            integer dimension(*) :: jcol
            integer dimension(n) :: istart
            integer dimension(*) :: link
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine clnkcsr
        subroutine ccsrdia(n,idiag,job,a,ja,ia,ndiag,diag,ioff,ao,jao,iao,ind) ! in :_sparsekit:cformats.f
            integer :: n
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            complex*8 dimension(ndiag,idiag) :: diag
            integer dimension(*) :: ioff
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: ind
        end subroutine ccsrdia
        subroutine cdiacsr(m,n,job,idiag,diag,ndiag,ioff,a,ja,ia) ! in :_sparsekit:cformats.f
            integer :: m
            integer :: n
            integer :: job
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            complex*8 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer dimension(*) :: ioff
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine cdiacsr
        subroutine cbsrcsr(job,n,m,na,a,ja,ia,ao,jao,iao) ! in :_sparsekit:cformats.f
            integer :: job
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            integer :: m
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            complex*8 dimension(na,*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
        end subroutine cbsrcsr
        subroutine ccsrbsr(job,nrow,m,na,a,ja,ia,ao,jao,iao,iw,ierr) ! in :_sparsekit:cformats.f
            integer :: job
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: m
            integer optional,check(shape(ao,0)==na),depend(ao) :: na=shape(ao,0)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(na,*) :: ao
            integer dimension(na),depend(na) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine ccsrbsr
        subroutine ccsrbnd(n,a,ja,ia,job,abd,nabd,lowd,ml,mu,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: job
            complex*8 dimension(nabd,n),depend(n) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            integer :: ierr
        end subroutine ccsrbnd
        subroutine cbndcsr(n,abd,nabd,lowd,ml,mu,a,ja,ia,len_bn,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*8 dimension(nabd,*) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: len_bn
            integer :: ierr
        end subroutine cbndcsr
        subroutine ccsrssk(n,imod,a,ja,ia,asky,isky,nzmax,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: imod
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*8 dimension(nzmax) :: asky
            integer dimension(n + 1),depend(n) :: isky
            integer optional,check(len(asky)>=nzmax),depend(asky) :: nzmax=len(asky)
            integer :: ierr
        end subroutine ccsrssk
        subroutine csskssr(n,imod,asky,isky,ao,jao,iao,nzmax,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(isky)-1)>=n),depend(isky) :: n=(len(isky)-1)
            integer :: imod
            complex*8 dimension(*) :: asky
            integer dimension(n + 1) :: isky
            complex*8 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(n + 1),depend(n) :: iao
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            integer :: ierr
        end subroutine csskssr
        subroutine ccsrjad(nrow,a,ja,ia,idiag,iperm,ao,jao,iao) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: idiag
            integer dimension(nrow),depend(nrow) :: iperm
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow),depend(nrow) :: iao
        end subroutine ccsrjad
        subroutine cjadcsr(nrow,idiag,a,ja,ia,iperm,ao,jao,iao) ! in :_sparsekit:cformats.f
            integer optional,check(len(iperm)>=nrow),depend(iperm) :: nrow=len(iperm)
            integer optional,check((len(ia)-1)>=idiag),depend(ia) :: idiag=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(idiag + 1) :: ia
            integer dimension(nrow) :: iperm
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
        end subroutine cjadcsr
        subroutine ccooell(job,n,nnz,a,ja,ia,ao,jao,lda,ncmax,nc,ierr) ! in :_sparsekit:cformats.f
            integer :: job
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            complex*8 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            complex*8 dimension(lda,ncmax) :: ao
            integer dimension(lda,ncmax),depend(lda,ncmax) :: jao
            integer optional,check(shape(ao,0)==lda),depend(ao) :: lda=shape(ao,0)
            integer optional,check(shape(ao,1)==ncmax),depend(ao) :: ncmax=shape(ao,1)
            integer :: nc
            integer :: ierr
        end subroutine ccooell
        subroutine cxcooell(n,nnz,a,ja,ia,ac,jac,nac,ner,ncmax,ierr) ! in :_sparsekit:cformats.f
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            complex*8 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            complex*8 dimension(nac,ner) :: ac
            integer dimension(nac,ner),depend(nac,ner) :: jac
            integer optional,check(shape(ac,0)==nac),depend(ac) :: nac=shape(ac,0)
            integer optional,check(shape(ac,1)==ner),depend(ac) :: ner=shape(ac,1)
            integer :: ncmax
            integer :: ierr
        end subroutine cxcooell
        subroutine ccsruss(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: diag
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine ccsruss
        subroutine cusscsr(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: diag
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine cusscsr
        subroutine ccsrsss(nrow,a,ja,ia,sorted,diag,al,jal,ial,au) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            logical :: sorted
            complex*8 dimension(*) :: diag
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*8 dimension(*) :: au
        end subroutine ccsrsss
        subroutine cssscsr(nrow,a,ja,ia,diag,al,jal,ial,au) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: diag
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*8 dimension(*) :: au
        end subroutine cssscsr
        subroutine ccsrvbr(n,ia,ja,a,nr,nc,kvstr,kvstc,ib,jb,kb,b,job,iwk,nkmax,nzmax,ierr) ! in :_sparsekit:cformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(n + 1) :: ia
            integer dimension(*) :: ja
            complex*8 dimension(*) :: a
            integer :: nr
            integer :: nc
            integer dimension(*) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(*) :: ib
            integer dimension(nkmax - 1) :: jb
            integer dimension(nkmax),depend(nkmax) :: kb
            complex*8 dimension(nzmax) :: b
            integer :: job
            integer dimension(*) :: iwk
            integer optional,check((len(jb)+1)>=nkmax),depend(jb) :: nkmax=(len(jb)+1)
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine ccsrvbr
        subroutine cvbrcsr(ia,ja,a,nr,kvstr,kvstc,ib,jb,kb,b,nzmax,ierr) ! in :_sparsekit:cformats.f
            integer dimension(*) :: ia
            integer dimension(*) :: ja
            complex*8 dimension(*) :: a
            integer optional,check((len(kvstr)-1)>=nr),depend(kvstr) :: nr=(len(kvstr)-1)
            integer dimension(nr + 1) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(nr + 1),depend(nr) :: ib
            integer dimension(*) :: jb
            integer dimension(*) :: kb
            complex*8 dimension(nzmax) :: b
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine cvbrcsr
        subroutine camux(n,x,y,a,ja,ia) ! in :_sparsekit:cmatvec.f
            integer :: n
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: y
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine camux
        subroutine camuxms(n,x,y,a,ja) ! in :_sparsekit:cmatvec.f
            integer :: n
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: y
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
        end subroutine camuxms
        subroutine catmux(n,x,y,a,ja,ia) ! in :_sparsekit:cmatvec.f
            integer :: n
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: y
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine catmux
        subroutine catmuxr(m,n,x,y,a,ja,ia) ! in :_sparsekit:cmatvec.f
            integer :: m
            integer :: n
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: y
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine catmuxr
        subroutine cactmux(n,x,y,a,ja,ia) ! in :_sparsekit:cmatvec.f
            integer :: n
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: y
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine cactmux
        subroutine cactmuxr(m,n,x,y,a,ja,ia) ! in :_sparsekit:cmatvec.f
            integer :: m
            integer :: n
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: y
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine cactmuxr
        subroutine camuxe(n,x,y,na,ncol,a,ja) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            integer :: ncol
            complex*8 dimension(na,*) :: a
            integer dimension(na,*),depend(na) :: ja
        end subroutine camuxe
        subroutine camuxd(n,x,y,diag,ndiag,idiag,ioff) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer dimension(idiag),depend(idiag) :: ioff
        end subroutine camuxd
        subroutine camuxj(n,x,y,jdiag,a,ja,ia) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            integer :: jdiag
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine camuxj
        subroutine cvbrmv(nr,nc,ia,ja,ka,a,kvstr,kvstc,x,b) ! in :_sparsekit:cmatvec.f
            integer optional,check((len(ia)-1)>=nr),depend(ia) :: nr=(len(ia)-1)
            integer :: nc
            integer dimension(nr + 1) :: ia
            integer dimension(*) :: ja
            integer dimension(*) :: ka
            complex*8 dimension(*) :: a
            integer dimension(nr + 1),depend(nr) :: kvstr
            integer dimension(*) :: kvstc
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: b
        end subroutine cvbrmv
        subroutine clsol(n,x,y,al,jal,ial) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(n + 1),depend(n) :: ial
        end subroutine clsol
        subroutine cldsol(n,x,y,al,jal) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine cldsol
        subroutine clsolc(n,x,y,al,jal,ial) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(*) :: ial
        end subroutine clsolc
        subroutine cldsolc(n,x,y,al,jal) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine cldsolc
        subroutine cldsoll(n,x,y,al,jal,nlev,lev,ilev) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer optional,check((len(ilev)-1)>=nlev),depend(ilev) :: nlev=(len(ilev)-1)
            integer dimension(n),depend(n) :: lev
            integer dimension(nlev + 1) :: ilev
        end subroutine cldsoll
        subroutine cusol(n,x,y,au,jau,iau) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(n + 1),depend(n) :: iau
        end subroutine cusol
        subroutine cudsol(n,x,y,au,jau) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine cudsol
        subroutine cusolc(n,x,y,au,jau,iau) ! in :_sparsekit:cmatvec.f
            integer :: n
            complex*8 dimension(*) :: x
            complex*8 dimension(*) :: y
            complex*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(*) :: iau
        end subroutine cusolc
        subroutine cudsolc(n,x,y,au,jau) ! in :_sparsekit:cmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            complex*8 dimension(n),depend(n) :: y
            complex*8 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine cudsolc
        subroutine csubmat(n,job,i1,i2,j1,j2,a,ja,ia,nr,nc,ao,jao,iao) ! in :_sparsekit:cunary.f
            integer :: n
            integer :: job
            integer :: i1
            integer :: i2
            integer :: j1
            integer :: j2
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nr
            integer :: nc
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine csubmat
        subroutine cfilter(n,job,drptol,a,ja,ia,b,jb,ib,len_bn,ierr) ! in :_sparsekit:cunary.f
            integer :: n
            integer :: job
            real*4 :: drptol
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: len_bn
            integer :: ierr
        end subroutine cfilter
        subroutine cfilterm(n,job,drop,a,ja,b,jb,len_bn,ierr) ! in :_sparsekit:cunary.f
            integer :: n
            integer :: job
            real*4 :: drop
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer :: len_bn
            integer :: ierr
        end subroutine cfilterm
        subroutine ccsort(n,a,ja,ia,iwork,values) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: iwork
            logical :: values
        end subroutine ccsort
        subroutine cclncsr(job,value2,nrow,a,ja,ia,indu,iwk) ! in :_sparsekit:cunary.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
        end subroutine cclncsr
        subroutine ccopmat(nrow,a,ja,ia,ao,jao,iao,ipos,job) ! in :_sparsekit:cunary.f
            integer :: nrow
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ipos
            integer :: job
        end subroutine ccopmat
        subroutine cmsrcop(nrow,a,ja,ao,jao,job) ! in :_sparsekit:cunary.f
            integer :: nrow
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer :: job
        end subroutine cmsrcop
        function cgetelm(i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:cunary.f
            integer :: i
            integer :: j
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
            complex*8 :: cgetelm
        end function cgetelm
        subroutine cgetdia(nrow,ncol,job,a,ja,ia,len_bn,diag,idiag,ioff) ! in :_sparsekit:cunary.f
            integer :: nrow
            integer :: ncol
            integer :: job
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: len_bn
            complex*8 dimension(*) :: diag
            integer dimension(*) :: idiag
            integer :: ioff
        end subroutine cgetdia
        subroutine ctransp(nrow,ncol,a,ja,ia,iwk,ierr) ! in :_sparsekit:cunary.f
            integer :: nrow
            integer :: ncol
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer dimension(*) :: iwk
            integer :: ierr
        end subroutine ctransp
        subroutine cgetl(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:cunary.f
            integer :: n
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine cgetl
        subroutine cgetu(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:cunary.f
            integer :: n
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine cgetu
        subroutine camask(nrow,ncol,a,ja,ia,jmask,imask,c,jc,ic,iw,nzmax,ierr) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(*) :: jmask
            integer dimension(nrow + 1),depend(nrow) :: imask
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            logical dimension(ncol) :: iw
            integer :: nzmax
            integer :: ierr
        end subroutine camask
        subroutine crperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer :: job
        end subroutine crperm
        subroutine ccperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(*) :: perm
            integer :: job
        end subroutine ccperm
        subroutine cdperm(nrow,a,ja,ia,ao,jao,iao,perm,qperm,job) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer dimension(*) :: qperm
            integer :: job
        end subroutine cdperm
        subroutine cdperm1(i1,i2,a,ja,ia,b,jb,ib,perm,ipos,job) ! in :_sparsekit:cunary.f
            integer :: i1
            integer :: i2
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: perm
            integer :: ipos
            integer :: job
        end subroutine cdperm1
        subroutine cdperm2(i1,i2,a,ja,ia,b,jb,ib,cperm,rperm,istart,ipos,job) ! in :_sparsekit:cunary.f
            integer :: i1
            integer :: i2
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: cperm
            integer dimension(*) :: rperm
            integer :: istart
            integer :: ipos
            integer :: job
        end subroutine cdperm2
        subroutine cdmperm(nrow,a,ja,ao,jao,perm,job) ! in :_sparsekit:cunary.f
            integer optional,check(len(perm)>=nrow),depend(perm) :: nrow=len(perm)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow) :: perm
            integer :: job
        end subroutine cdmperm
        subroutine cdvperm(n,x,perm) ! in :_sparsekit:cunary.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*8 dimension(n) :: x
            integer dimension(n),depend(n) :: perm
        end subroutine cdvperm
        subroutine cextbdg(n,a,ja,ia,bdiag,nblk,ao,jao,iao) ! in :_sparsekit:cunary.f
            integer :: n
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: bdiag
            integer :: nblk
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine cextbdg
        subroutine cgetbwd(n,a,ja,ia,ml,mu) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: ml
            integer :: mu
        end subroutine cgetbwd
        subroutine crnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
        end subroutine crnrms
        subroutine ccnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
        end subroutine ccnrms
        subroutine croscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(nrow),depend(nrow) :: diag
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine croscal
        subroutine ccoscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:cunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*8 dimension(nrow),depend(nrow) :: diag
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine ccoscal
        subroutine caddblk(nrowa,ncola,a,ja,ia,ipos,jpos,job,nrowb,ncolb,b,jb,ib,nrowc,ncolc,c,jc,ic,nzmx,ierr) ! in :_sparsekit:cunary.f
            integer :: nrowa
            integer :: ncola
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ipos
            integer :: jpos
            integer :: job
            integer :: nrowb
            integer :: ncolb
            complex*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: nrowc
            integer :: ncolc
            complex*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmx
            integer :: ierr
        end subroutine caddblk
        subroutine cxtrows(i1,i2,a,ja,ia,ao,jao,iao,iperm,job) ! in :_sparsekit:cunary.f
            integer :: i1
            integer :: i2
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iperm
            integer :: job
        end subroutine cxtrows
        subroutine damub(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine damub
        subroutine daplb(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine daplb
        subroutine daplb1(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine daplb1
        subroutine daplsb(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 :: s
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine daplsb
        subroutine daplsb1(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 :: s
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine daplsb1
        subroutine dapmbt(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine dapmbt
        subroutine daplsbt(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 :: s
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine daplsbt
        subroutine ddiamua(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine ddiamua
        subroutine damudia(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine damudia
        subroutine daplsca(nrow,a,ja,ia,scal,iw) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 :: scal
            integer dimension(*) :: iw
        end subroutine daplsca
        subroutine dapldia(nrow,job,a,ja,ia,diag,b,jb,ib,iw) ! in :_sparsekit:dblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer dimension(*) :: iw
        end subroutine dapldia
        subroutine dcsrdns(nrow,ncol,a,ja,ia,dns,ndns,ierr) ! in :_sparsekit:dformats.f
            integer :: nrow
            integer :: ncol
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            integer :: ierr
        end subroutine dcsrdns
        subroutine ddnscsr(nrow,ncol,nzmax,dns,ndns,a,ja,ia,ierr) ! in :_sparsekit:dformats.f
            integer :: nrow
            integer :: ncol
            integer :: nzmax
            real*8 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ierr
        end subroutine ddnscsr
        subroutine dcoocsr(nrow,nnz,a,ir,jc,ao,jao,iao) ! in :_sparsekit:dformats.f
            integer :: nrow
            integer :: nnz
            real*8 dimension(*) :: a
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine dcoocsr
        subroutine dcoicsr(n,nnz,job,a,ja,ia,iwk) ! in :_sparsekit:dformats.f
            integer optional,check((len(iwk)-1)>=n),depend(iwk) :: n=(len(iwk)-1)
            integer optional,check(len(ja)>=nnz),depend(ja) :: nnz=len(ja)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            integer dimension(n + 1) :: iwk
        end subroutine dcoicsr
        subroutine dcsrcoo(nrow,job,nzmax,a,ja,ia,nnz,ao,ir,jc,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nzmax
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nnz
            real*8 dimension(*) :: ao
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            integer :: ierr
        end subroutine dcsrcoo
        subroutine dcsrssr(nrow,a,ja,ia,nzmax,ao,jao,iao,ierr) ! in :_sparsekit:dformats.f
            integer :: nrow
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nzmax
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ierr
        end subroutine dcsrssr
        subroutine dssrcsr(job,value2,nrow,a,ja,ia,nzmax,ao,jao,iao,indu,iwk,ierr) ! in :_sparsekit:dformats.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            real*8 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
            integer :: ierr
        end subroutine dssrcsr
        subroutine dxssrcsr(nrow,a,ja,ia,nzmax,ao,jao,iao,indu,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            real*8 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow + 1),depend(nrow) :: indu
            integer :: ierr
        end subroutine dxssrcsr
        subroutine dcsrell(nrow,a,ja,ia,maxcol,coef,jcoef,ncoef,ndiag,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: maxcol
            real*8 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            integer :: ierr
        end subroutine dcsrell
        subroutine dellcsr(nrow,coef,jcoef,ncoef,ndiag,a,ja,ia,nzmax,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nzmax
            integer :: ierr
        end subroutine dellcsr
        subroutine dcsrmsr(n,a,ja,ia,ao,jao,wk,iwk) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            real*8 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine dcsrmsr
        subroutine dmsrcsr(n,a,ja,ao,jao,iao,wk,iwk) ! in :_sparsekit:dformats.f
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
            real*8 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine dmsrcsr
        subroutine dcsrcsc(n,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: job
            integer :: ipos
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1),depend(n) :: iao
        end subroutine dcsrcsc
        subroutine dcsrcsc2(n,n2,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer optional,check((len(iao)-1)>=n2),depend(iao) :: n2=(len(iao)-1)
            integer :: job
            integer :: ipos
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n2 + 1) :: iao
        end subroutine dcsrcsc2
        subroutine dcsrlnk(n,a,ja,ia,link) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: link
        end subroutine dcsrlnk
        subroutine dlnkcsr(n,a,jcol,istart,link,ao,jao,iao) ! in :_sparsekit:dformats.f
            integer optional,check(len(istart)>=n),depend(istart) :: n=len(istart)
            real*8 dimension(*) :: a
            integer dimension(*) :: jcol
            integer dimension(n) :: istart
            integer dimension(*) :: link
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine dlnkcsr
        subroutine dcsrdia(n,idiag,job,a,ja,ia,ndiag,diag,ioff,ao,jao,iao,ind) ! in :_sparsekit:dformats.f
            integer :: n
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            real*8 dimension(ndiag,idiag) :: diag
            integer dimension(*) :: ioff
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: ind
        end subroutine dcsrdia
        subroutine ddiacsr(m,n,job,idiag,diag,ndiag,ioff,a,ja,ia) ! in :_sparsekit:dformats.f
            integer :: m
            integer :: n
            integer :: job
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            real*8 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer dimension(*) :: ioff
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine ddiacsr
        subroutine dbsrcsr(job,n,m,na,a,ja,ia,ao,jao,iao) ! in :_sparsekit:dformats.f
            integer :: job
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            integer :: m
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            real*8 dimension(na,*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
        end subroutine dbsrcsr
        subroutine dcsrbsr(job,nrow,m,na,a,ja,ia,ao,jao,iao,iw,ierr) ! in :_sparsekit:dformats.f
            integer :: job
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: m
            integer optional,check(shape(ao,0)==na),depend(ao) :: na=shape(ao,0)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(na,*) :: ao
            integer dimension(na),depend(na) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine dcsrbsr
        subroutine dcsrbnd(n,a,ja,ia,job,abd,nabd,lowd,ml,mu,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: job
            real*8 dimension(nabd,n),depend(n) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            integer :: ierr
        end subroutine dcsrbnd
        subroutine dbndcsr(n,abd,nabd,lowd,ml,mu,a,ja,ia,len_bn,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*8 dimension(nabd,*) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: len_bn
            integer :: ierr
        end subroutine dbndcsr
        subroutine dcsrssk(n,imod,a,ja,ia,asky,isky,nzmax,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: imod
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*8 dimension(nzmax) :: asky
            integer dimension(n + 1),depend(n) :: isky
            integer optional,check(len(asky)>=nzmax),depend(asky) :: nzmax=len(asky)
            integer :: ierr
        end subroutine dcsrssk
        subroutine dsskssr(n,imod,asky,isky,ao,jao,iao,nzmax,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(isky)-1)>=n),depend(isky) :: n=(len(isky)-1)
            integer :: imod
            real*8 dimension(*) :: asky
            integer dimension(n + 1) :: isky
            real*8 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(n + 1),depend(n) :: iao
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            integer :: ierr
        end subroutine dsskssr
        subroutine dcsrjad(nrow,a,ja,ia,idiag,iperm,ao,jao,iao) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: idiag
            integer dimension(nrow),depend(nrow) :: iperm
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow),depend(nrow) :: iao
        end subroutine dcsrjad
        subroutine djadcsr(nrow,idiag,a,ja,ia,iperm,ao,jao,iao) ! in :_sparsekit:dformats.f
            integer optional,check(len(iperm)>=nrow),depend(iperm) :: nrow=len(iperm)
            integer optional,check((len(ia)-1)>=idiag),depend(ia) :: idiag=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(idiag + 1) :: ia
            integer dimension(nrow) :: iperm
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
        end subroutine djadcsr
        subroutine dcsort(ival,n,icnt,index_bn,ilo,ihi) ! in :_sparsekit:dformats.f
            integer dimension(n) :: ival
            integer optional,check(len(ival)>=n),depend(ival) :: n=len(ival)
            integer dimension(ihi-(ilo)+1),depend(ilo,ihi) :: icnt
            integer dimension(n),depend(n) :: index_bn
            integer :: ilo
            integer :: ihi
        end subroutine dcsort
        subroutine dcooell(job,n,nnz,a,ja,ia,ao,jao,lda,ncmax,nc,ierr) ! in :_sparsekit:dformats.f
            integer :: job
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            real*8 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            real*8 dimension(lda,ncmax) :: ao
            integer dimension(lda,ncmax),depend(lda,ncmax) :: jao
            integer optional,check(shape(ao,0)==lda),depend(ao) :: lda=shape(ao,0)
            integer optional,check(shape(ao,1)==ncmax),depend(ao) :: ncmax=shape(ao,1)
            integer :: nc
            integer :: ierr
        end subroutine dcooell
        subroutine dxcooell(n,nnz,a,ja,ia,ac,jac,nac,ner,ncmax,ierr) ! in :_sparsekit:dformats.f
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            real*8 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            real*8 dimension(nac,ner) :: ac
            integer dimension(nac,ner),depend(nac,ner) :: jac
            integer optional,check(shape(ac,0)==nac),depend(ac) :: nac=shape(ac,0)
            integer optional,check(shape(ac,1)==ner),depend(ac) :: ner=shape(ac,1)
            integer :: ncmax
            integer :: ierr
        end subroutine dxcooell
        subroutine dcsruss(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: diag
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine dcsruss
        subroutine dusscsr(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: diag
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine dusscsr
        subroutine dcsrsss(nrow,a,ja,ia,sorted,diag,al,jal,ial,au) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            logical :: sorted
            real*8 dimension(*) :: diag
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*8 dimension(*) :: au
        end subroutine dcsrsss
        subroutine dssscsr(nrow,a,ja,ia,diag,al,jal,ial,au) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: diag
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*8 dimension(*) :: au
        end subroutine dssscsr
        subroutine dcsrvbr(n,ia,ja,a,nr,nc,kvstr,kvstc,ib,jb,kb,b,job,iwk,nkmax,nzmax,ierr) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(n + 1) :: ia
            integer dimension(*) :: ja
            real*8 dimension(*) :: a
            integer :: nr
            integer :: nc
            integer dimension(*) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(*) :: ib
            integer dimension(nkmax - 1) :: jb
            integer dimension(nkmax),depend(nkmax) :: kb
            real*8 dimension(nzmax) :: b
            integer :: job
            integer dimension(*) :: iwk
            integer optional,check((len(jb)+1)>=nkmax),depend(jb) :: nkmax=(len(jb)+1)
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine dcsrvbr
        subroutine dvbrcsr(ia,ja,a,nr,kvstr,kvstc,ib,jb,kb,b,nzmax,ierr) ! in :_sparsekit:dformats.f
            integer dimension(*) :: ia
            integer dimension(*) :: ja
            real*8 dimension(*) :: a
            integer optional,check((len(kvstr)-1)>=nr),depend(kvstr) :: nr=(len(kvstr)-1)
            integer dimension(nr + 1) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(nr + 1),depend(nr) :: ib
            integer dimension(*) :: jb
            integer dimension(*) :: kb
            real*8 dimension(nzmax) :: b
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine dvbrcsr
        subroutine csorted(n,ia,ja,sorted) ! in :_sparsekit:dformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(n + 1) :: ia
            integer dimension(*) :: ja
            logical :: sorted
        end subroutine csorted
        subroutine damux(n,x,y,a,ja,ia) ! in :_sparsekit:dmatvec.f
            integer :: n
            real*8 dimension(*) :: x
            real*8 dimension(*) :: y
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine damux
        subroutine damuxms(n,x,y,a,ja) ! in :_sparsekit:dmatvec.f
            integer :: n
            real*8 dimension(*) :: x
            real*8 dimension(*) :: y
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
        end subroutine damuxms
        subroutine datmux(n,x,y,a,ja,ia) ! in :_sparsekit:dmatvec.f
            integer :: n
            real*8 dimension(*) :: x
            real*8 dimension(*) :: y
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine datmux
        subroutine datmuxr(m,n,x,y,a,ja,ia) ! in :_sparsekit:dmatvec.f
            integer :: m
            integer :: n
            real*8 dimension(*) :: x
            real*8 dimension(*) :: y
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine datmuxr
        subroutine damuxe(n,x,y,na,ncol,a,ja) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            integer :: ncol
            real*8 dimension(na,*) :: a
            integer dimension(na,*),depend(na) :: ja
        end subroutine damuxe
        subroutine damuxd(n,x,y,diag,ndiag,idiag,ioff) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer dimension(idiag),depend(idiag) :: ioff
        end subroutine damuxd
        subroutine damuxj(n,x,y,jdiag,a,ja,ia) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            integer :: jdiag
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine damuxj
        subroutine dvbrmv(nr,nc,ia,ja,ka,a,kvstr,kvstc,x,b) ! in :_sparsekit:dmatvec.f
            integer optional,check((len(ia)-1)>=nr),depend(ia) :: nr=(len(ia)-1)
            integer :: nc
            integer dimension(nr + 1) :: ia
            integer dimension(*) :: ja
            integer dimension(*) :: ka
            real*8 dimension(*) :: a
            integer dimension(nr + 1),depend(nr) :: kvstr
            integer dimension(*) :: kvstc
            real*8 dimension(*) :: x
            real*8 dimension(*) :: b
        end subroutine dvbrmv
        subroutine dlsol(n,x,y,al,jal,ial) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(n + 1),depend(n) :: ial
        end subroutine dlsol
        subroutine dldsol(n,x,y,al,jal) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine dldsol
        subroutine dlsolc(n,x,y,al,jal,ial) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(*) :: ial
        end subroutine dlsolc
        subroutine dldsolc(n,x,y,al,jal) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine dldsolc
        subroutine dldsoll(n,x,y,al,jal,nlev,lev,ilev) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: al
            integer dimension(*) :: jal
            integer optional,check((len(ilev)-1)>=nlev),depend(ilev) :: nlev=(len(ilev)-1)
            integer dimension(n),depend(n) :: lev
            integer dimension(nlev + 1) :: ilev
        end subroutine dldsoll
        subroutine dusol(n,x,y,au,jau,iau) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(n + 1),depend(n) :: iau
        end subroutine dusol
        subroutine dudsol(n,x,y,au,jau) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine dudsol
        subroutine dusolc(n,x,y,au,jau,iau) ! in :_sparsekit:dmatvec.f
            integer :: n
            real*8 dimension(*) :: x
            real*8 dimension(*) :: y
            real*8 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(*) :: iau
        end subroutine dusolc
        subroutine dudsolc(n,x,y,au,jau) ! in :_sparsekit:dmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            real*8 dimension(n),depend(n) :: y
            real*8 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine dudsolc
        subroutine dsubmat(n,job,i1,i2,j1,j2,a,ja,ia,nr,nc,ao,jao,iao) ! in :_sparsekit:dunary.f
            integer :: n
            integer :: job
            integer :: i1
            integer :: i2
            integer :: j1
            integer :: j2
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nr
            integer :: nc
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine dsubmat
        subroutine dfilter(n,job,drptol,a,ja,ia,b,jb,ib,len_bn,ierr) ! in :_sparsekit:dunary.f
            integer :: n
            integer :: job
            real*8 :: drptol
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: len_bn
            integer :: ierr
        end subroutine dfilter
        subroutine dfilterm(n,job,drop,a,ja,b,jb,len_bn,ierr) ! in :_sparsekit:dunary.f
            integer :: n
            integer :: job
            real*8 :: drop
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer :: len_bn
            integer :: ierr
        end subroutine dfilterm
        subroutine ddcsort(n,a,ja,ia,iwork,values) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: iwork
            logical :: values
        end subroutine ddcsort
        subroutine dclncsr(job,value2,nrow,a,ja,ia,indu,iwk) ! in :_sparsekit:dunary.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
        end subroutine dclncsr
        subroutine dcopmat(nrow,a,ja,ia,ao,jao,iao,ipos,job) ! in :_sparsekit:dunary.f
            integer :: nrow
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ipos
            integer :: job
        end subroutine dcopmat
        subroutine dmsrcop(nrow,a,ja,ao,jao,job) ! in :_sparsekit:dunary.f
            integer :: nrow
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer :: job
        end subroutine dmsrcop
        function dgetelm(i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:dunary.f
            integer :: i
            integer :: j
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
            real*8 :: dgetelm
        end function dgetelm
        subroutine dgetdia(nrow,ncol,job,a,ja,ia,len_bn,diag,idiag,ioff) ! in :_sparsekit:dunary.f
            integer :: nrow
            integer :: ncol
            integer :: job
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: len_bn
            real*8 dimension(*) :: diag
            integer dimension(*) :: idiag
            integer :: ioff
        end subroutine dgetdia
        subroutine dtransp(nrow,ncol,a,ja,ia,iwk,ierr) ! in :_sparsekit:dunary.f
            integer :: nrow
            integer :: ncol
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer dimension(*) :: iwk
            integer :: ierr
        end subroutine dtransp
        subroutine dgetl(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:dunary.f
            integer :: n
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine dgetl
        subroutine dgetu(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:dunary.f
            integer :: n
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine dgetu
        subroutine levels(n,jal,ial,nlev,lev,ilev,levnum) ! in :_sparsekit:dunary.f
            integer :: n
            integer dimension(*) :: jal
            integer dimension(*) :: ial
            integer :: nlev
            integer dimension(*) :: lev
            integer dimension(*) :: ilev
            integer dimension(*) :: levnum
        end subroutine levels
        subroutine damask(nrow,ncol,a,ja,ia,jmask,imask,c,jc,ic,iw,nzmax,ierr) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(*) :: jmask
            integer dimension(nrow + 1),depend(nrow) :: imask
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            logical dimension(ncol) :: iw
            integer :: nzmax
            integer :: ierr
        end subroutine damask
        subroutine drperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer :: job
        end subroutine drperm
        subroutine dcperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(*) :: perm
            integer :: job
        end subroutine dcperm
        subroutine ddperm(nrow,a,ja,ia,ao,jao,iao,perm,qperm,job) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer dimension(*) :: qperm
            integer :: job
        end subroutine ddperm
        subroutine ddperm1(i1,i2,a,ja,ia,b,jb,ib,perm,ipos,job) ! in :_sparsekit:dunary.f
            integer :: i1
            integer :: i2
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: perm
            integer :: ipos
            integer :: job
        end subroutine ddperm1
        subroutine ddperm2(i1,i2,a,ja,ia,b,jb,ib,cperm,rperm,istart,ipos,job) ! in :_sparsekit:dunary.f
            integer :: i1
            integer :: i2
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: cperm
            integer dimension(*) :: rperm
            integer :: istart
            integer :: ipos
            integer :: job
        end subroutine ddperm2
        subroutine ddmperm(nrow,a,ja,ao,jao,perm,job) ! in :_sparsekit:dunary.f
            integer optional,check(len(perm)>=nrow),depend(perm) :: nrow=len(perm)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow) :: perm
            integer :: job
        end subroutine ddmperm
        subroutine ddvperm(n,x,perm) ! in :_sparsekit:dunary.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*8 dimension(n) :: x
            integer dimension(n),depend(n) :: perm
        end subroutine ddvperm
        subroutine ivperm(n,ix,perm) ! in :_sparsekit:dunary.f
            integer optional,check(len(ix)>=n),depend(ix) :: n=len(ix)
            integer dimension(n) :: ix
            integer dimension(n),depend(n) :: perm
        end subroutine ivperm
        subroutine dretmx(n,a,ja,ia,dd) ! in :_sparsekit:dunary.f
            integer :: n
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: dd
        end subroutine dretmx
        subroutine diapos(n,ja,ia,idiag) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(n),depend(n) :: idiag
        end subroutine diapos
        subroutine ddscaldg(n,a,ja,ia,diag,job) ! in :_sparsekit:dunary.f
            integer :: n
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: diag
            integer :: job
        end subroutine ddscaldg
        subroutine dextbdg(n,a,ja,ia,bdiag,nblk,ao,jao,iao) ! in :_sparsekit:dunary.f
            integer :: n
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: bdiag
            integer :: nblk
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine dextbdg
        subroutine dgetbwd(n,a,ja,ia,ml,mu) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: ml
            integer :: mu
        end subroutine dgetbwd
        subroutine blkfnd(nrow,ja,ia,nblk) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nblk
        end subroutine blkfnd
        subroutine blkchk(nrow,ja,ia,nblk,imsg) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nblk
            integer :: imsg
        end subroutine blkchk
        subroutine infdia(n,ja,ia,ind,idiag) ! in :_sparsekit:dunary.f
            integer :: n
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer dimension(*) :: ind
            integer :: idiag
        end subroutine infdia
        subroutine amubdg(nrow,ncol,ncolb,ja,ia,jb,ib,ndegr,nnz,iw) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            integer optional,check(len(iw)>=ncolb),depend(iw) :: ncolb=len(iw)
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            integer dimension(nrow),depend(nrow) :: ndegr
            integer :: nnz
            integer dimension(ncolb) :: iw
        end subroutine amubdg
        subroutine aplbdg(nrow,ncol,ja,ia,jb,ib,ndegr,nnz,iw) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer dimension(nrow),depend(nrow) :: ndegr
            integer :: nnz
            integer dimension(ncol) :: iw
        end subroutine aplbdg
        subroutine drnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
        end subroutine drnrms
        subroutine dcnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
        end subroutine dcnrms
        subroutine droscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine droscal
        subroutine dcoscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine dcoscal
        subroutine daddblk(nrowa,ncola,a,ja,ia,ipos,jpos,job,nrowb,ncolb,b,jb,ib,nrowc,ncolc,c,jc,ic,nzmx,ierr) ! in :_sparsekit:dunary.f
            integer :: nrowa
            integer :: ncola
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ipos
            integer :: jpos
            integer :: job
            integer :: nrowb
            integer :: ncolb
            real*8 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: nrowc
            integer :: ncolc
            real*8 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmx
            integer :: ierr
        end subroutine daddblk
        subroutine get1up(n,ja,ia,ju) ! in :_sparsekit:dunary.f
            integer :: n
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer dimension(*) :: ju
        end subroutine get1up
        subroutine dxtrows(i1,i2,a,ja,ia,ao,jao,iao,iperm,job) ! in :_sparsekit:dunary.f
            integer :: i1
            integer :: i2
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*8 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iperm
            integer :: job
        end subroutine dxtrows
        subroutine csrkvstr(n,ia,ja,nr,kvstr) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(n + 1) :: ia
            integer dimension(*) :: ja
            integer :: nr
            integer dimension(*) :: kvstr
        end subroutine csrkvstr
        subroutine csrkvstc(n,ia,ja,nc,kvstc,iwk) ! in :_sparsekit:dunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(n + 1) :: ia
            integer dimension(*) :: ja
            integer :: nc
            integer dimension(*) :: kvstc
            integer dimension(*) :: iwk
        end subroutine csrkvstc
        subroutine kvstmerge(nr,kvstr,nc,kvstc,n,kvst) ! in :_sparsekit:dunary.f
            integer optional,check((len(kvstr)-1)>=nr),depend(kvstr) :: nr=(len(kvstr)-1)
            integer dimension(nr + 1) :: kvstr
            integer optional,check((len(kvstc)-1)>=nc),depend(kvstc) :: nc=(len(kvstc)-1)
            integer dimension(nc + 1) :: kvstc
            integer :: n
            integer dimension(*) :: kvst
        end subroutine kvstmerge
        subroutine samub(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine samub
        subroutine saplb(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine saplb
        subroutine saplb1(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine saplb1
        subroutine saplsb(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 :: s
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine saplsb
        subroutine saplsb1(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 :: s
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine saplsb1
        subroutine sapmbt(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine sapmbt
        subroutine saplsbt(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 :: s
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine saplsbt
        subroutine sdiamua(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine sdiamua
        subroutine samudia(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine samudia
        subroutine saplsca(nrow,a,ja,ia,scal,iw) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 :: scal
            integer dimension(*) :: iw
        end subroutine saplsca
        subroutine sapldia(nrow,job,a,ja,ia,diag,b,jb,ib,iw) ! in :_sparsekit:sblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer dimension(*) :: iw
        end subroutine sapldia
        subroutine scsrdns(nrow,ncol,a,ja,ia,dns,ndns,ierr) ! in :_sparsekit:sformats.f
            integer :: nrow
            integer :: ncol
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            integer :: ierr
        end subroutine scsrdns
        subroutine sdnscsr(nrow,ncol,nzmax,dns,ndns,a,ja,ia,ierr) ! in :_sparsekit:sformats.f
            integer :: nrow
            integer :: ncol
            integer :: nzmax
            real*4 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ierr
        end subroutine sdnscsr
        subroutine scoocsr(nrow,nnz,a,ir,jc,ao,jao,iao) ! in :_sparsekit:sformats.f
            integer :: nrow
            integer :: nnz
            real*4 dimension(*) :: a
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine scoocsr
        subroutine scoicsr(n,nnz,job,a,ja,ia,iwk) ! in :_sparsekit:sformats.f
            integer optional,check((len(iwk)-1)>=n),depend(iwk) :: n=(len(iwk)-1)
            integer optional,check(len(ja)>=nnz),depend(ja) :: nnz=len(ja)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            integer dimension(n + 1) :: iwk
        end subroutine scoicsr
        subroutine scsrcoo(nrow,job,nzmax,a,ja,ia,nnz,ao,ir,jc,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nzmax
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nnz
            real*4 dimension(*) :: ao
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            integer :: ierr
        end subroutine scsrcoo
        subroutine scsrssr(nrow,a,ja,ia,nzmax,ao,jao,iao,ierr) ! in :_sparsekit:sformats.f
            integer :: nrow
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nzmax
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ierr
        end subroutine scsrssr
        subroutine sssrcsr(job,value2,nrow,a,ja,ia,nzmax,ao,jao,iao,indu,iwk,ierr) ! in :_sparsekit:sformats.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            real*4 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
            integer :: ierr
        end subroutine sssrcsr
        subroutine sxssrcsr(nrow,a,ja,ia,nzmax,ao,jao,iao,indu,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            real*4 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow + 1),depend(nrow) :: indu
            integer :: ierr
        end subroutine sxssrcsr
        subroutine scsrell(nrow,a,ja,ia,maxcol,coef,jcoef,ncoef,ndiag,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: maxcol
            real*4 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            integer :: ierr
        end subroutine scsrell
        subroutine sellcsr(nrow,coef,jcoef,ncoef,ndiag,a,ja,ia,nzmax,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nzmax
            integer :: ierr
        end subroutine sellcsr
        subroutine scsrmsr(n,a,ja,ia,ao,jao,wk,iwk) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            real*4 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine scsrmsr
        subroutine smsrcsr(n,a,ja,ao,jao,iao,wk,iwk) ! in :_sparsekit:sformats.f
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
            real*4 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine smsrcsr
        subroutine scsrcsc(n,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: job
            integer :: ipos
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1),depend(n) :: iao
        end subroutine scsrcsc
        subroutine scsrcsc2(n,n2,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer optional,check((len(iao)-1)>=n2),depend(iao) :: n2=(len(iao)-1)
            integer :: job
            integer :: ipos
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n2 + 1) :: iao
        end subroutine scsrcsc2
        subroutine scsrlnk(n,a,ja,ia,link) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: link
        end subroutine scsrlnk
        subroutine slnkcsr(n,a,jcol,istart,link,ao,jao,iao) ! in :_sparsekit:sformats.f
            integer optional,check(len(istart)>=n),depend(istart) :: n=len(istart)
            real*4 dimension(*) :: a
            integer dimension(*) :: jcol
            integer dimension(n) :: istart
            integer dimension(*) :: link
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine slnkcsr
        subroutine scsrdia(n,idiag,job,a,ja,ia,ndiag,diag,ioff,ao,jao,iao,ind) ! in :_sparsekit:sformats.f
            integer :: n
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            real*4 dimension(ndiag,idiag) :: diag
            integer dimension(*) :: ioff
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: ind
        end subroutine scsrdia
        subroutine sdiacsr(m,n,job,idiag,diag,ndiag,ioff,a,ja,ia) ! in :_sparsekit:sformats.f
            integer :: m
            integer :: n
            integer :: job
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            real*4 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer dimension(*) :: ioff
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine sdiacsr
        subroutine sbsrcsr(job,n,m,na,a,ja,ia,ao,jao,iao) ! in :_sparsekit:sformats.f
            integer :: job
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            integer :: m
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            real*4 dimension(na,*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
        end subroutine sbsrcsr
        subroutine scsrbsr(job,nrow,m,na,a,ja,ia,ao,jao,iao,iw,ierr) ! in :_sparsekit:sformats.f
            integer :: job
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: m
            integer optional,check(shape(ao,0)==na),depend(ao) :: na=shape(ao,0)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(na,*) :: ao
            integer dimension(na),depend(na) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine scsrbsr
        subroutine scsrbnd(n,a,ja,ia,job,abd,nabd,lowd,ml,mu,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: job
            real*4 dimension(nabd,n),depend(n) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            integer :: ierr
        end subroutine scsrbnd
        subroutine sbndcsr(n,abd,nabd,lowd,ml,mu,a,ja,ia,len_bn,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*4 dimension(nabd,*) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: len_bn
            integer :: ierr
        end subroutine sbndcsr
        subroutine scsrssk(n,imod,a,ja,ia,asky,isky,nzmax,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: imod
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            real*4 dimension(nzmax) :: asky
            integer dimension(n + 1),depend(n) :: isky
            integer optional,check(len(asky)>=nzmax),depend(asky) :: nzmax=len(asky)
            integer :: ierr
        end subroutine scsrssk
        subroutine ssskssr(n,imod,asky,isky,ao,jao,iao,nzmax,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(isky)-1)>=n),depend(isky) :: n=(len(isky)-1)
            integer :: imod
            real*4 dimension(*) :: asky
            integer dimension(n + 1) :: isky
            real*4 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(n + 1),depend(n) :: iao
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            integer :: ierr
        end subroutine ssskssr
        subroutine scsrjad(nrow,a,ja,ia,idiag,iperm,ao,jao,iao) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: idiag
            integer dimension(nrow),depend(nrow) :: iperm
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow),depend(nrow) :: iao
        end subroutine scsrjad
        subroutine sjadcsr(nrow,idiag,a,ja,ia,iperm,ao,jao,iao) ! in :_sparsekit:sformats.f
            integer optional,check(len(iperm)>=nrow),depend(iperm) :: nrow=len(iperm)
            integer optional,check((len(ia)-1)>=idiag),depend(ia) :: idiag=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(idiag + 1) :: ia
            integer dimension(nrow) :: iperm
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
        end subroutine sjadcsr
        subroutine scooell(job,n,nnz,a,ja,ia,ao,jao,lda,ncmax,nc,ierr) ! in :_sparsekit:sformats.f
            integer :: job
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            real*4 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            real*4 dimension(lda,ncmax) :: ao
            integer dimension(lda,ncmax),depend(lda,ncmax) :: jao
            integer optional,check(shape(ao,0)==lda),depend(ao) :: lda=shape(ao,0)
            integer optional,check(shape(ao,1)==ncmax),depend(ao) :: ncmax=shape(ao,1)
            integer :: nc
            integer :: ierr
        end subroutine scooell
        subroutine sxcooell(n,nnz,a,ja,ia,ac,jac,nac,ner,ncmax,ierr) ! in :_sparsekit:sformats.f
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            real*4 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            real*4 dimension(nac,ner) :: ac
            integer dimension(nac,ner),depend(nac,ner) :: jac
            integer optional,check(shape(ac,0)==nac),depend(ac) :: nac=shape(ac,0)
            integer optional,check(shape(ac,1)==ner),depend(ac) :: ner=shape(ac,1)
            integer :: ncmax
            integer :: ierr
        end subroutine sxcooell
        subroutine scsruss(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: diag
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*4 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine scsruss
        subroutine susscsr(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: diag
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*4 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine susscsr
        subroutine scsrsss(nrow,a,ja,ia,sorted,diag,al,jal,ial,au) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            logical :: sorted
            real*4 dimension(*) :: diag
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*4 dimension(*) :: au
        end subroutine scsrsss
        subroutine sssscsr(nrow,a,ja,ia,diag,al,jal,ial,au) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: diag
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            real*4 dimension(*) :: au
        end subroutine sssscsr
        subroutine scsrvbr(n,ia,ja,a,nr,nc,kvstr,kvstc,ib,jb,kb,b,job,iwk,nkmax,nzmax,ierr) ! in :_sparsekit:sformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(n + 1) :: ia
            integer dimension(*) :: ja
            real*4 dimension(*) :: a
            integer :: nr
            integer :: nc
            integer dimension(*) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(*) :: ib
            integer dimension(nkmax - 1) :: jb
            integer dimension(nkmax),depend(nkmax) :: kb
            real*4 dimension(nzmax) :: b
            integer :: job
            integer dimension(*) :: iwk
            integer optional,check((len(jb)+1)>=nkmax),depend(jb) :: nkmax=(len(jb)+1)
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine scsrvbr
        subroutine svbrcsr(ia,ja,a,nr,kvstr,kvstc,ib,jb,kb,b,nzmax,ierr) ! in :_sparsekit:sformats.f
            integer dimension(*) :: ia
            integer dimension(*) :: ja
            real*4 dimension(*) :: a
            integer optional,check((len(kvstr)-1)>=nr),depend(kvstr) :: nr=(len(kvstr)-1)
            integer dimension(nr + 1) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(nr + 1),depend(nr) :: ib
            integer dimension(*) :: jb
            integer dimension(*) :: kb
            real*4 dimension(nzmax) :: b
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine svbrcsr
        subroutine samux(n,x,y,a,ja,ia) ! in :_sparsekit:smatvec.f
            integer :: n
            real*4 dimension(*) :: x
            real*4 dimension(*) :: y
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine samux
        subroutine samuxms(n,x,y,a,ja) ! in :_sparsekit:smatvec.f
            integer :: n
            real*4 dimension(*) :: x
            real*4 dimension(*) :: y
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
        end subroutine samuxms
        subroutine satmux(n,x,y,a,ja,ia) ! in :_sparsekit:smatvec.f
            integer :: n
            real*4 dimension(*) :: x
            real*4 dimension(*) :: y
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine satmux
        subroutine satmuxr(m,n,x,y,a,ja,ia) ! in :_sparsekit:smatvec.f
            integer :: m
            integer :: n
            real*4 dimension(*) :: x
            real*4 dimension(*) :: y
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine satmuxr
        subroutine samuxe(n,x,y,na,ncol,a,ja) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            integer :: ncol
            real*4 dimension(na,*) :: a
            integer dimension(na,*),depend(na) :: ja
        end subroutine samuxe
        subroutine samuxd(n,x,y,diag,ndiag,idiag,ioff) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer dimension(idiag),depend(idiag) :: ioff
        end subroutine samuxd
        subroutine samuxj(n,x,y,jdiag,a,ja,ia) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            integer :: jdiag
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine samuxj
        subroutine svbrmv(nr,nc,ia,ja,ka,a,kvstr,kvstc,x,b) ! in :_sparsekit:smatvec.f
            integer optional,check((len(ia)-1)>=nr),depend(ia) :: nr=(len(ia)-1)
            integer :: nc
            integer dimension(nr + 1) :: ia
            integer dimension(*) :: ja
            integer dimension(*) :: ka
            real*4 dimension(*) :: a
            integer dimension(nr + 1),depend(nr) :: kvstr
            integer dimension(*) :: kvstc
            real*4 dimension(*) :: x
            real*4 dimension(*) :: b
        end subroutine svbrmv
        subroutine slsol(n,x,y,al,jal,ial) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(n + 1),depend(n) :: ial
        end subroutine slsol
        subroutine sldsol(n,x,y,al,jal) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine sldsol
        subroutine slsolc(n,x,y,al,jal,ial) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(*) :: ial
        end subroutine slsolc
        subroutine sldsolc(n,x,y,al,jal) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine sldsolc
        subroutine sldsoll(n,x,y,al,jal,nlev,lev,ilev) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: al
            integer dimension(*) :: jal
            integer optional,check((len(ilev)-1)>=nlev),depend(ilev) :: nlev=(len(ilev)-1)
            integer dimension(n),depend(n) :: lev
            integer dimension(nlev + 1) :: ilev
        end subroutine sldsoll
        subroutine susol(n,x,y,au,jau,iau) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(n + 1),depend(n) :: iau
        end subroutine susol
        subroutine sudsol(n,x,y,au,jau) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine sudsol
        subroutine susolc(n,x,y,au,jau,iau) ! in :_sparsekit:smatvec.f
            integer :: n
            real*4 dimension(*) :: x
            real*4 dimension(*) :: y
            real*4 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(*) :: iau
        end subroutine susolc
        subroutine sudsolc(n,x,y,au,jau) ! in :_sparsekit:smatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            real*4 dimension(n),depend(n) :: y
            real*4 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine sudsolc
        subroutine f2pywrapcgetelm(cgetelmf2pywrap,i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:_sparsekit-f2pywrappers.f
            complex*8 :: cgetelmf2pywrap
            integer :: i
            integer :: j
            complex*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
        end subroutine f2pywrapcgetelm
        subroutine f2pywrapdgetelm(dgetelmf2pywrap,i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:_sparsekit-f2pywrappers.f
            real*8 :: dgetelmf2pywrap
            integer :: i
            integer :: j
            real*8 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
        end subroutine f2pywrapdgetelm
        subroutine f2pywrapsgetelm(sgetelmf2pywrap,i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:_sparsekit-f2pywrappers.f
            real*4 :: sgetelmf2pywrap
            integer :: i
            integer :: j
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
        end subroutine f2pywrapsgetelm
        subroutine f2pywrapzgetelm(zgetelmf2pywrap,i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:_sparsekit-f2pywrappers.f
            complex*16 :: zgetelmf2pywrap
            integer :: i
            integer :: j
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
        end subroutine f2pywrapzgetelm
        subroutine ssubmat(n,job,i1,i2,j1,j2,a,ja,ia,nr,nc,ao,jao,iao) ! in :_sparsekit:sunary.f
            integer :: n
            integer :: job
            integer :: i1
            integer :: i2
            integer :: j1
            integer :: j2
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nr
            integer :: nc
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine ssubmat
        subroutine sfilter(n,job,drptol,a,ja,ia,b,jb,ib,len_bn,ierr) ! in :_sparsekit:sunary.f
            integer :: n
            integer :: job
            real*4 :: drptol
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: len_bn
            integer :: ierr
        end subroutine sfilter
        subroutine sfilterm(n,job,drop,a,ja,b,jb,len_bn,ierr) ! in :_sparsekit:sunary.f
            integer :: n
            integer :: job
            real*4 :: drop
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer :: len_bn
            integer :: ierr
        end subroutine sfilterm
        subroutine scsort(n,a,ja,ia,iwork,values) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: iwork
            logical :: values
        end subroutine scsort
        subroutine sclncsr(job,value2,nrow,a,ja,ia,indu,iwk) ! in :_sparsekit:sunary.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
        end subroutine sclncsr
        subroutine scopmat(nrow,a,ja,ia,ao,jao,iao,ipos,job) ! in :_sparsekit:sunary.f
            integer :: nrow
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ipos
            integer :: job
        end subroutine scopmat
        subroutine smsrcop(nrow,a,ja,ao,jao,job) ! in :_sparsekit:sunary.f
            integer :: nrow
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer :: job
        end subroutine smsrcop
        function sgetelm(i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:sunary.f
            integer :: i
            integer :: j
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
            real*4 :: sgetelm
        end function sgetelm
        subroutine sgetdia(nrow,ncol,job,a,ja,ia,len_bn,diag,idiag,ioff) ! in :_sparsekit:sunary.f
            integer :: nrow
            integer :: ncol
            integer :: job
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: len_bn
            real*4 dimension(*) :: diag
            integer dimension(*) :: idiag
            integer :: ioff
        end subroutine sgetdia
        subroutine stransp(nrow,ncol,a,ja,ia,iwk,ierr) ! in :_sparsekit:sunary.f
            integer :: nrow
            integer :: ncol
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer dimension(*) :: iwk
            integer :: ierr
        end subroutine stransp
        subroutine sgetl(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:sunary.f
            integer :: n
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine sgetl
        subroutine sgetu(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:sunary.f
            integer :: n
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine sgetu
        subroutine samask(nrow,ncol,a,ja,ia,jmask,imask,c,jc,ic,iw,nzmax,ierr) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(*) :: jmask
            integer dimension(nrow + 1),depend(nrow) :: imask
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            logical dimension(ncol) :: iw
            integer :: nzmax
            integer :: ierr
        end subroutine samask
        subroutine srperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer :: job
        end subroutine srperm
        subroutine scperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(*) :: perm
            integer :: job
        end subroutine scperm
        subroutine sdperm(nrow,a,ja,ia,ao,jao,iao,perm,qperm,job) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer dimension(*) :: qperm
            integer :: job
        end subroutine sdperm
        subroutine sdperm1(i1,i2,a,ja,ia,b,jb,ib,perm,ipos,job) ! in :_sparsekit:sunary.f
            integer :: i1
            integer :: i2
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: perm
            integer :: ipos
            integer :: job
        end subroutine sdperm1
        subroutine sdperm2(i1,i2,a,ja,ia,b,jb,ib,cperm,rperm,istart,ipos,job) ! in :_sparsekit:sunary.f
            integer :: i1
            integer :: i2
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: cperm
            integer dimension(*) :: rperm
            integer :: istart
            integer :: ipos
            integer :: job
        end subroutine sdperm2
        subroutine sdmperm(nrow,a,ja,ao,jao,perm,job) ! in :_sparsekit:sunary.f
            integer optional,check(len(perm)>=nrow),depend(perm) :: nrow=len(perm)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow) :: perm
            integer :: job
        end subroutine sdmperm
        subroutine sdvperm(n,x,perm) ! in :_sparsekit:sunary.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            real*4 dimension(n) :: x
            integer dimension(n),depend(n) :: perm
        end subroutine sdvperm
        subroutine sretmx(n,a,ja,ia,dd) ! in :_sparsekit:sunary.f
            integer :: n
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: dd
        end subroutine sretmx
        subroutine sdscaldg(n,a,ja,ia,diag,job) ! in :_sparsekit:sunary.f
            integer :: n
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: diag
            integer :: job
        end subroutine sdscaldg
        subroutine sextbdg(n,a,ja,ia,bdiag,nblk,ao,jao,iao) ! in :_sparsekit:sunary.f
            integer :: n
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: bdiag
            integer :: nblk
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine sextbdg
        subroutine sgetbwd(n,a,ja,ia,ml,mu) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: ml
            integer :: mu
        end subroutine sgetbwd
        subroutine srnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
        end subroutine srnrms
        subroutine scnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
        end subroutine scnrms
        subroutine sroscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine sroscal
        subroutine scoscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:sunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*4 dimension(nrow),depend(nrow) :: diag
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine scoscal
        subroutine saddblk(nrowa,ncola,a,ja,ia,ipos,jpos,job,nrowb,ncolb,b,jb,ib,nrowc,ncolc,c,jc,ic,nzmx,ierr) ! in :_sparsekit:sunary.f
            integer :: nrowa
            integer :: ncola
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ipos
            integer :: jpos
            integer :: job
            integer :: nrowb
            integer :: ncolb
            real*4 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: nrowc
            integer :: ncolc
            real*4 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmx
            integer :: ierr
        end subroutine saddblk
        subroutine sxtrows(i1,i2,a,ja,ia,ao,jao,iao,iperm,job) ! in :_sparsekit:sunary.f
            integer :: i1
            integer :: i2
            real*4 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            real*4 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iperm
            integer :: job
        end subroutine sxtrows
        subroutine zamub(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine zamub
        subroutine zaplb(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer dimension(ncol) :: iw
            integer :: ierr
        end subroutine zaplb
        subroutine zaplb1(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine zaplb1
        subroutine zaplsb(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 :: s
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine zaplsb
        subroutine zaplsb1(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,ierr) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: ncol
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 :: s
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            integer :: nzmax
            integer :: ierr
        end subroutine zaplsb1
        subroutine zapmbt(nrow,ncol,job,a,ja,ia,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine zapmbt
        subroutine zaplsbt(nrow,ncol,a,ja,ia,s,b,jb,ib,c,jc,ic,nzmax,iw,ierr) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check((len(ib)-1)>=ncol),depend(ib) :: ncol=(len(ib)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 :: s
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(ncol + 1) :: ib
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmax
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine zaplsbt
        subroutine zdiamua(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(nrow),depend(nrow) :: diag
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine zdiamua
        subroutine zamudia(nrow,job,a,ja,ia,diag,b,jb,ib) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(nrow),depend(nrow) :: diag
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
        end subroutine zamudia
        subroutine zaplsca(nrow,a,ja,ia,scal,iw) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 :: scal
            integer dimension(*) :: iw
        end subroutine zaplsca
        subroutine zapldia(nrow,job,a,ja,ia,diag,b,jb,ib,iw) ! in :_sparsekit:zblassm.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(nrow),depend(nrow) :: diag
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer dimension(*) :: iw
        end subroutine zapldia
        subroutine zcsrdns(nrow,ncol,a,ja,ia,dns,ndns,ierr) ! in :_sparsekit:zformats.f
            integer :: nrow
            integer :: ncol
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            integer :: ierr
        end subroutine zcsrdns
        subroutine zdnscsr(nrow,ncol,nzmax,dns,ndns,a,ja,ia,ierr) ! in :_sparsekit:zformats.f
            integer :: nrow
            integer :: ncol
            integer :: nzmax
            complex*16 dimension(ndns,*) :: dns
            integer optional,check(shape(dns,0)==ndns),depend(dns) :: ndns=shape(dns,0)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ierr
        end subroutine zdnscsr
        subroutine zcoocsr(nrow,nnz,a,ir,jc,ao,jao,iao) ! in :_sparsekit:zformats.f
            integer :: nrow
            integer :: nnz
            complex*16 dimension(*) :: a
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine zcoocsr
        subroutine zcoicsr(n,nnz,job,a,ja,ia,iwk) ! in :_sparsekit:zformats.f
            integer optional,check((len(iwk)-1)>=n),depend(iwk) :: n=(len(iwk)-1)
            integer optional,check(len(ja)>=nnz),depend(ja) :: nnz=len(ja)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            integer dimension(n + 1) :: iwk
        end subroutine zcoicsr
        subroutine zcsrcoo(nrow,job,nzmax,a,ja,ia,nnz,ao,ir,jc,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nzmax
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nnz
            complex*16 dimension(*) :: ao
            integer dimension(*) :: ir
            integer dimension(*) :: jc
            integer :: ierr
        end subroutine zcsrcoo
        subroutine zcsrssr(nrow,a,ja,ia,nzmax,ao,jao,iao,ierr) ! in :_sparsekit:zformats.f
            integer :: nrow
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nzmax
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ierr
        end subroutine zcsrssr
        subroutine zssrcsr(job,value2,nrow,a,ja,ia,nzmax,ao,jao,iao,indu,iwk,ierr) ! in :_sparsekit:zformats.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            complex*16 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
            integer :: ierr
        end subroutine zssrcsr
        subroutine zxssrcsr(nrow,a,ja,ia,nzmax,ao,jao,iao,indu,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            complex*16 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow + 1),depend(nrow) :: indu
            integer :: ierr
        end subroutine zxssrcsr
        subroutine zcsrell(nrow,a,ja,ia,maxcol,coef,jcoef,ncoef,ndiag,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: maxcol
            complex*16 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            integer :: ierr
        end subroutine zcsrell
        subroutine zellcsr(nrow,coef,jcoef,ncoef,ndiag,a,ja,ia,nzmax,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(ncoef,1) :: coef
            integer dimension(ncoef,1),depend(ncoef) :: jcoef
            integer optional,check(shape(coef,0)==ncoef),depend(coef) :: ncoef=shape(coef,0)
            integer :: ndiag
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: nzmax
            integer :: ierr
        end subroutine zellcsr
        subroutine zcsrmsr(n,a,ja,ia,ao,jao,wk,iwk) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            complex*16 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine zcsrmsr
        subroutine zmsrcsr(n,a,ja,ao,jao,iao,wk,iwk) ! in :_sparsekit:zformats.f
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
            complex*16 dimension(n),depend(n) :: wk
            integer dimension(n + 1),depend(n) :: iwk
        end subroutine zmsrcsr
        subroutine zcsrcsc(n,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: job
            integer :: ipos
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1),depend(n) :: iao
        end subroutine zcsrcsc
        subroutine zcsrcsc2(n,n2,job,ipos,a,ja,ia,ao,jao,iao) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer optional,check((len(iao)-1)>=n2),depend(iao) :: n2=(len(iao)-1)
            integer :: job
            integer :: ipos
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n2 + 1) :: iao
        end subroutine zcsrcsc2
        subroutine zcsrlnk(n,a,ja,ia,link) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: link
        end subroutine zcsrlnk
        subroutine zlnkcsr(n,a,jcol,istart,link,ao,jao,iao) ! in :_sparsekit:zformats.f
            integer optional,check(len(istart)>=n),depend(istart) :: n=len(istart)
            complex*16 dimension(*) :: a
            integer dimension(*) :: jcol
            integer dimension(n) :: istart
            integer dimension(*) :: link
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine zlnkcsr
        subroutine zcsrdia(n,idiag,job,a,ja,ia,ndiag,diag,ioff,ao,jao,iao,ind) ! in :_sparsekit:zformats.f
            integer :: n
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            complex*16 dimension(ndiag,idiag) :: diag
            integer dimension(*) :: ioff
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: ind
        end subroutine zcsrdia
        subroutine zdiacsr(m,n,job,idiag,diag,ndiag,ioff,a,ja,ia) ! in :_sparsekit:zformats.f
            integer :: m
            integer :: n
            integer :: job
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            complex*16 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer dimension(*) :: ioff
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine zdiacsr
        subroutine zbsrcsr(job,n,m,na,a,ja,ia,ao,jao,iao) ! in :_sparsekit:zformats.f
            integer :: job
            integer optional,check((len(iao)-1)>=n),depend(iao) :: n=(len(iao)-1)
            integer :: m
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            complex*16 dimension(na,*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(n + 1) :: iao
        end subroutine zbsrcsr
        subroutine zcsrbsr(job,nrow,m,na,a,ja,ia,ao,jao,iao,iw,ierr) ! in :_sparsekit:zformats.f
            integer :: job
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: m
            integer optional,check(shape(ao,0)==na),depend(ao) :: na=shape(ao,0)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(na,*) :: ao
            integer dimension(na),depend(na) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iw
            integer :: ierr
        end subroutine zcsrbsr
        subroutine zcsrbnd(n,a,ja,ia,job,abd,nabd,lowd,ml,mu,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: job
            complex*16 dimension(nabd,n),depend(n) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            integer :: ierr
        end subroutine zcsrbnd
        subroutine zbndcsr(n,abd,nabd,lowd,ml,mu,a,ja,ia,len_bn,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*16 dimension(nabd,*) :: abd
            integer optional,check(shape(abd,0)==nabd),depend(abd) :: nabd=shape(abd,0)
            integer :: lowd
            integer :: ml
            integer :: mu
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: len_bn
            integer :: ierr
        end subroutine zbndcsr
        subroutine zcsrssk(n,imod,a,ja,ia,asky,isky,nzmax,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer :: imod
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            complex*16 dimension(nzmax) :: asky
            integer dimension(n + 1),depend(n) :: isky
            integer optional,check(len(asky)>=nzmax),depend(asky) :: nzmax=len(asky)
            integer :: ierr
        end subroutine zcsrssk
        subroutine zsskssr(n,imod,asky,isky,ao,jao,iao,nzmax,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(isky)-1)>=n),depend(isky) :: n=(len(isky)-1)
            integer :: imod
            complex*16 dimension(*) :: asky
            integer dimension(n + 1) :: isky
            complex*16 dimension(nzmax) :: ao
            integer dimension(nzmax),depend(nzmax) :: jao
            integer dimension(n + 1),depend(n) :: iao
            integer optional,check(len(ao)>=nzmax),depend(ao) :: nzmax=len(ao)
            integer :: ierr
        end subroutine zsskssr
        subroutine zcsrjad(nrow,a,ja,ia,idiag,iperm,ao,jao,iao) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer :: idiag
            integer dimension(nrow),depend(nrow) :: iperm
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow),depend(nrow) :: iao
        end subroutine zcsrjad
        subroutine zjadcsr(nrow,idiag,a,ja,ia,iperm,ao,jao,iao) ! in :_sparsekit:zformats.f
            integer optional,check(len(iperm)>=nrow),depend(iperm) :: nrow=len(iperm)
            integer optional,check((len(ia)-1)>=idiag),depend(ia) :: idiag=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(idiag + 1) :: ia
            integer dimension(nrow) :: iperm
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
        end subroutine zjadcsr
        subroutine zcooell(job,n,nnz,a,ja,ia,ao,jao,lda,ncmax,nc,ierr) ! in :_sparsekit:zformats.f
            integer :: job
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            complex*16 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            complex*16 dimension(lda,ncmax) :: ao
            integer dimension(lda,ncmax),depend(lda,ncmax) :: jao
            integer optional,check(shape(ao,0)==lda),depend(ao) :: lda=shape(ao,0)
            integer optional,check(shape(ao,1)==ncmax),depend(ao) :: ncmax=shape(ao,1)
            integer :: nc
            integer :: ierr
        end subroutine zcooell
        subroutine zxcooell(n,nnz,a,ja,ia,ac,jac,nac,ner,ncmax,ierr) ! in :_sparsekit:zformats.f
            integer :: n
            integer optional,check(len(a)>=nnz),depend(a) :: nnz=len(a)
            complex*16 dimension(nnz) :: a
            integer dimension(nnz),depend(nnz) :: ja
            integer dimension(nnz),depend(nnz) :: ia
            complex*16 dimension(nac,ner) :: ac
            integer dimension(nac,ner),depend(nac,ner) :: jac
            integer optional,check(shape(ac,0)==nac),depend(ac) :: nac=shape(ac,0)
            integer optional,check(shape(ac,1)==ner),depend(ac) :: ner=shape(ac,1)
            integer :: ncmax
            integer :: ierr
        end subroutine zxcooell
        subroutine zcsruss(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: diag
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*16 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine zcsruss
        subroutine zusscsr(nrow,a,ja,ia,diag,al,jal,ial,au,jau,iau) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: diag
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*16 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(nrow + 1),depend(nrow) :: iau
        end subroutine zusscsr
        subroutine zcsrsss(nrow,a,ja,ia,sorted,diag,al,jal,ial,au) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            logical :: sorted
            complex*16 dimension(*) :: diag
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*16 dimension(*) :: au
        end subroutine zcsrsss
        subroutine zssscsr(nrow,a,ja,ia,diag,al,jal,ial,au) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: diag
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(nrow + 1),depend(nrow) :: ial
            complex*16 dimension(*) :: au
        end subroutine zssscsr
        subroutine zcsrvbr(n,ia,ja,a,nr,nc,kvstr,kvstc,ib,jb,kb,b,job,iwk,nkmax,nzmax,ierr) ! in :_sparsekit:zformats.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            integer dimension(n + 1) :: ia
            integer dimension(*) :: ja
            complex*16 dimension(*) :: a
            integer :: nr
            integer :: nc
            integer dimension(*) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(*) :: ib
            integer dimension(nkmax - 1) :: jb
            integer dimension(nkmax),depend(nkmax) :: kb
            complex*16 dimension(nzmax) :: b
            integer :: job
            integer dimension(*) :: iwk
            integer optional,check((len(jb)+1)>=nkmax),depend(jb) :: nkmax=(len(jb)+1)
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine zcsrvbr
        subroutine zvbrcsr(ia,ja,a,nr,kvstr,kvstc,ib,jb,kb,b,nzmax,ierr) ! in :_sparsekit:zformats.f
            integer dimension(*) :: ia
            integer dimension(*) :: ja
            complex*16 dimension(*) :: a
            integer optional,check((len(kvstr)-1)>=nr),depend(kvstr) :: nr=(len(kvstr)-1)
            integer dimension(nr + 1) :: kvstr
            integer dimension(*) :: kvstc
            integer dimension(nr + 1),depend(nr) :: ib
            integer dimension(*) :: jb
            integer dimension(*) :: kb
            complex*16 dimension(nzmax) :: b
            integer optional,check(len(b)>=nzmax),depend(b) :: nzmax=len(b)
            integer :: ierr
        end subroutine zvbrcsr
        subroutine zamux(n,x,y,a,ja,ia) ! in :_sparsekit:zmatvec.f
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine zamux
        subroutine zamuxms(n,x,y,a,ja) ! in :_sparsekit:zmatvec.f
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
        end subroutine zamuxms
        subroutine zatmux(n,x,y,a,ja,ia) ! in :_sparsekit:zmatvec.f
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine zatmux
        subroutine zatmuxr(m,n,x,y,a,ja,ia) ! in :_sparsekit:zmatvec.f
            integer :: m
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine zatmuxr
        subroutine zactmux(n,x,y,a,ja,ia) ! in :_sparsekit:zmatvec.f
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine zactmux
        subroutine zactmuxr(m,n,x,y,a,ja,ia) ! in :_sparsekit:zmatvec.f
            integer :: m
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine zactmuxr
        subroutine zamuxe(n,x,y,na,ncol,a,ja) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            integer optional,check(shape(a,0)==na),depend(a) :: na=shape(a,0)
            integer :: ncol
            complex*16 dimension(na,*) :: a
            integer dimension(na,*),depend(na) :: ja
        end subroutine zamuxe
        subroutine zamuxd(n,x,y,diag,ndiag,idiag,ioff) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(ndiag,idiag) :: diag
            integer optional,check(shape(diag,0)==ndiag),depend(diag) :: ndiag=shape(diag,0)
            integer optional,check(shape(diag,1)==idiag),depend(diag) :: idiag=shape(diag,1)
            integer dimension(idiag),depend(idiag) :: ioff
        end subroutine zamuxd
        subroutine zamuxj(n,x,y,jdiag,a,ja,ia) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            integer :: jdiag
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
        end subroutine zamuxj
        subroutine zvbrmv(nr,nc,ia,ja,ka,a,kvstr,kvstc,x,b) ! in :_sparsekit:zmatvec.f
            integer optional,check((len(ia)-1)>=nr),depend(ia) :: nr=(len(ia)-1)
            integer :: nc
            integer dimension(nr + 1) :: ia
            integer dimension(*) :: ja
            integer dimension(*) :: ka
            complex*16 dimension(*) :: a
            integer dimension(nr + 1),depend(nr) :: kvstr
            integer dimension(*) :: kvstc
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: b
        end subroutine zvbrmv
        subroutine zlsol(n,x,y,al,jal,ial) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(n + 1),depend(n) :: ial
        end subroutine zlsol
        subroutine zldsol(n,x,y,al,jal) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine zldsol
        subroutine zlsolc(n,x,y,al,jal,ial) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
            integer dimension(*) :: ial
        end subroutine zlsolc
        subroutine zldsolc(n,x,y,al,jal) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
        end subroutine zldsolc
        subroutine zldsoll(n,x,y,al,jal,nlev,lev,ilev) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: al
            integer dimension(*) :: jal
            integer optional,check((len(ilev)-1)>=nlev),depend(ilev) :: nlev=(len(ilev)-1)
            integer dimension(n),depend(n) :: lev
            integer dimension(nlev + 1) :: ilev
        end subroutine zldsoll
        subroutine zusol(n,x,y,au,jau,iau) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(n + 1),depend(n) :: iau
        end subroutine zusol
        subroutine zudsol(n,x,y,au,jau) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine zudsol
        subroutine zusolc(n,x,y,au,jau,iau) ! in :_sparsekit:zmatvec.f
            integer :: n
            complex*16 dimension(*) :: x
            complex*16 dimension(*) :: y
            complex*16 dimension(*) :: au
            integer dimension(*) :: jau
            integer dimension(*) :: iau
        end subroutine zusolc
        subroutine zudsolc(n,x,y,au,jau) ! in :_sparsekit:zmatvec.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            complex*16 dimension(n),depend(n) :: y
            complex*16 dimension(*) :: au
            integer dimension(*) :: jau
        end subroutine zudsolc
        subroutine zsubmat(n,job,i1,i2,j1,j2,a,ja,ia,nr,nc,ao,jao,iao) ! in :_sparsekit:zunary.f
            integer :: n
            integer :: job
            integer :: i1
            integer :: i2
            integer :: j1
            integer :: j2
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: nr
            integer :: nc
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine zsubmat
        subroutine zfilter(n,job,drptol,a,ja,ia,b,jb,ib,len_bn,ierr) ! in :_sparsekit:zunary.f
            integer :: n
            integer :: job
            real*8 :: drptol
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: len_bn
            integer :: ierr
        end subroutine zfilter
        subroutine zfilterm(n,job,drop,a,ja,b,jb,len_bn,ierr) ! in :_sparsekit:zunary.f
            integer :: n
            integer :: job
            real*8 :: drop
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer :: len_bn
            integer :: ierr
        end subroutine zfilterm
        subroutine zcsort(n,a,ja,ia,iwork,values) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer dimension(*) :: iwork
            logical :: values
        end subroutine zcsort
        subroutine zclncsr(job,value2,nrow,a,ja,ia,indu,iwk) ! in :_sparsekit:zunary.f
            integer :: job
            integer :: value2
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(nrow),depend(nrow) :: indu
            integer dimension(nrow + 1),depend(nrow) :: iwk
        end subroutine zclncsr
        subroutine zcopmat(nrow,a,ja,ia,ao,jao,iao,ipos,job) ! in :_sparsekit:zunary.f
            integer :: nrow
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer :: ipos
            integer :: job
        end subroutine zcopmat
        subroutine zmsrcop(nrow,a,ja,ao,jao,job) ! in :_sparsekit:zunary.f
            integer :: nrow
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer :: job
        end subroutine zmsrcop
        function zgetelm(i,j,a,ja,ia,iadd,sorted) ! in :_sparsekit:zunary.f
            integer :: i
            integer :: j
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: iadd
            logical :: sorted
            complex*16 :: zgetelm
        end function zgetelm
        subroutine zgetdia(nrow,ncol,job,a,ja,ia,len_bn,diag,idiag,ioff) ! in :_sparsekit:zunary.f
            integer :: nrow
            integer :: ncol
            integer :: job
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: len_bn
            complex*16 dimension(*) :: diag
            integer dimension(*) :: idiag
            integer :: ioff
        end subroutine zgetdia
        subroutine ztransp(nrow,ncol,a,ja,ia,iwk,ierr) ! in :_sparsekit:zunary.f
            integer :: nrow
            integer :: ncol
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer dimension(*) :: iwk
            integer :: ierr
        end subroutine ztransp
        subroutine zgetl(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:zunary.f
            integer :: n
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine zgetl
        subroutine zgetu(n,a,ja,ia,ao,jao,iao) ! in :_sparsekit:zunary.f
            integer :: n
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine zgetu
        subroutine zamask(nrow,ncol,a,ja,ia,jmask,imask,c,jc,ic,iw,nzmax,ierr) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer optional,check(len(iw)>=ncol),depend(iw) :: ncol=len(iw)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            integer dimension(*) :: jmask
            integer dimension(nrow + 1),depend(nrow) :: imask
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(nrow + 1),depend(nrow) :: ic
            logical dimension(ncol) :: iw
            integer :: nzmax
            integer :: ierr
        end subroutine zamask
        subroutine zrperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer :: job
        end subroutine zrperm
        subroutine zcperm(nrow,a,ja,ia,ao,jao,iao,perm,job) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(*) :: perm
            integer :: job
        end subroutine zcperm
        subroutine zdperm(nrow,a,ja,ia,ao,jao,iao,perm,qperm,job) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow + 1),depend(nrow) :: iao
            integer dimension(nrow),depend(nrow) :: perm
            integer dimension(*) :: qperm
            integer :: job
        end subroutine zdperm
        subroutine zdperm1(i1,i2,a,ja,ia,b,jb,ib,perm,ipos,job) ! in :_sparsekit:zunary.f
            integer :: i1
            integer :: i2
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: perm
            integer :: ipos
            integer :: job
        end subroutine zdperm1
        subroutine zdperm2(i1,i2,a,ja,ia,b,jb,ib,cperm,rperm,istart,ipos,job) ! in :_sparsekit:zunary.f
            integer :: i1
            integer :: i2
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer dimension(*) :: cperm
            integer dimension(*) :: rperm
            integer :: istart
            integer :: ipos
            integer :: job
        end subroutine zdperm2
        subroutine zdmperm(nrow,a,ja,ao,jao,perm,job) ! in :_sparsekit:zunary.f
            integer optional,check(len(perm)>=nrow),depend(perm) :: nrow=len(perm)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(nrow) :: perm
            integer :: job
        end subroutine zdmperm
        subroutine zdvperm(n,x,perm) ! in :_sparsekit:zunary.f
            integer optional,check(len(x)>=n),depend(x) :: n=len(x)
            complex*16 dimension(n) :: x
            integer dimension(n),depend(n) :: perm
        end subroutine zdvperm
        subroutine zextbdg(n,a,ja,ia,bdiag,nblk,ao,jao,iao) ! in :_sparsekit:zunary.f
            integer :: n
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: bdiag
            integer :: nblk
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
        end subroutine zextbdg
        subroutine zgetbwd(n,a,ja,ia,ml,mu) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=n),depend(ia) :: n=(len(ia)-1)
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(n + 1) :: ia
            integer :: ml
            integer :: mu
        end subroutine zgetbwd
        subroutine zrnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
        end subroutine zrnrms
        subroutine zcnrms(nrow,nrm,a,ja,ia,diag) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: nrm
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            real*8 dimension(nrow),depend(nrow) :: diag
        end subroutine zcnrms
        subroutine zroscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(nrow),depend(nrow) :: diag
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine zroscal
        subroutine zcoscal(nrow,job,nrm,a,ja,ia,diag,b,jb,ib,ierr) ! in :_sparsekit:zunary.f
            integer optional,check((len(ia)-1)>=nrow),depend(ia) :: nrow=(len(ia)-1)
            integer :: job
            integer :: nrm
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(nrow + 1) :: ia
            complex*16 dimension(nrow),depend(nrow) :: diag
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(nrow + 1),depend(nrow) :: ib
            integer :: ierr
        end subroutine zcoscal
        subroutine zaddblk(nrowa,ncola,a,ja,ia,ipos,jpos,job,nrowb,ncolb,b,jb,ib,nrowc,ncolc,c,jc,ic,nzmx,ierr) ! in :_sparsekit:zunary.f
            integer :: nrowa
            integer :: ncola
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            integer :: ipos
            integer :: jpos
            integer :: job
            integer :: nrowb
            integer :: ncolb
            complex*16 dimension(*) :: b
            integer dimension(*) :: jb
            integer dimension(*) :: ib
            integer :: nrowc
            integer :: ncolc
            complex*16 dimension(*) :: c
            integer dimension(*) :: jc
            integer dimension(*) :: ic
            integer :: nzmx
            integer :: ierr
        end subroutine zaddblk
        subroutine zxtrows(i1,i2,a,ja,ia,ao,jao,iao,iperm,job) ! in :_sparsekit:zunary.f
            integer :: i1
            integer :: i2
            complex*16 dimension(*) :: a
            integer dimension(*) :: ja
            integer dimension(*) :: ia
            complex*16 dimension(*) :: ao
            integer dimension(*) :: jao
            integer dimension(*) :: iao
            integer dimension(*) :: iperm
            integer :: job
        end subroutine zxtrows
    end interface 
end python module _sparsekit

! This file was auto-generated with f2py (version:2.21.184-1308).
! See http://cens.ioc.ee/projects/f2py2e/
