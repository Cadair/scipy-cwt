#define airy_doc "airy(z) calculates the Airy functions and their derivatives\nevaluated at real or complex number z.  The Airy functions Ai and Bi \nare two independent solutions of y''(x)=xy.  Aip and Bip are the first derivatives\nevaluated at x of Ai and Bi respectively."
#define airye_doc "airye(z) calculates the exponentially scaled Airy functions and \ntheir derivatives evaluated at real or complex number z.  \nairye(z)[0:1] = airy(z)[0:1] * exp(2.0/3.0*z*sqrt(z))\nairye(z)[2:3] = airy(z)[2:3] * exp(-abs((2.0/3.0*z*sqrt(z)).real))"
#define bdtr_doc "bdtr(k,n,p) returns the sum of the terms 0 through k of the\nBinomial probability density:  sum(nCj p**j (1-p)**(n-j),j=0..k)"
#define bdtrc_doc "bdtrc(k,n,p) returns the sum of the terms k+1 through n of the\nBinomial probability density: sum(nCj p**j (1-p)**(n-j), j=k+1..n)"
#define bdtri_doc "bdtri(k,n,y) finds the probability p such that the sum of the\nterms 0 through k of the Binomial probability density is equal to the\ngiven cumulative probability y."
#define besselpoly_doc "besselpoly(a,lam,nu) returns the value of the integral:\nintegral(x**lam * jv(nu,2*a*x),x=0..1)."
#define beta_doc "beta(a,b) returns gamma(a) * gamma(b) / gamma(a+b)"
#define btdtr_doc "btdtr(a,b,x) returns the area from zero to x under the beta\ndensity function: gamma(a+b)/(gamma(a)*gamma(b)))*integral(t**(a-1)\n(1-t)**(b-1), t=0..x)"
#define cbrt_doc "cbrt(x) returns the real cube root of x."
#define chdtr_doc "chdtr(v,x) Returns the area under the left hand tail (from 0 to x) of the Chi\nsquare probability density function with v degrees of freedom:\n1/(2**(v/2) * gamma(v/2)) * integral(t**(v/2-1) * exp(-t/2), t=0..x)"
#define chdtrc_doc "chdtrc(v,x) returns the area under the right hand tail (from x to\ninfinity) of the Chi square probability density function with v\ndegrees of freedom:\n1/(2**(v/2) * gamma(v/2)) * integral(t**(v/2-1) * exp(-t/2), t=x..inf)"
#define chdtri_doc "chdtri(v,p) returns the argument x such that chdtrc(v,x) is equal\nto p."
#define cosdg_doc "cosdg(x) calculates the cosine of the angle x given in degrees."
#define cosm1_doc "calculates cos(x) - 1 for use when x is near zero."
#define cotdg_doc "cotdg(x) calculates the cotangent of the angle x given in degrees."
#define dawsn_doc "dawsn(x) returns dawson's integral: exp(-x**2) *\nintegral(exp(t**2),t=0..x)."
#define ellie_doc "ellie(phi,m) returns the incomplete elliptic integral of the\nsecond kind: integral(sqrt(1-m*sin(t)**2),t=0..phi)"
#define ellik_doc "ellik(phi,m) returns the incomplete elliptic integral of the first\nkind: integral(1/sqrt(1-m*sin(t)**2),t=0..phi)"
#define ellpe_doc "ellpe(m1) returns the complete integral of the second kind:\nintegral(sqrt(1-(1-m1)*sin(t)**2),t=0..pi/2)\n*** Notice that argument must be m1 = 1-m ***"
#define ellpj_doc "ellpj(u,m) calculates the Jacobian elliptic functions of\nparameter m between 0 and 1, and real u.  The returned functions are\noften written sn(u|m), cn(u|m), and dn(u|m).  The value of ph is such\nthat if u = ellik(ph,m), then sn(u|m) = sin(ph) and cn(u|m) = cos(ph)."
#define ellpk_doc "ellpk(m1) returns the complete integral of the first kind:\nintegral(1/sqrt(1-(1-m1)*sin(t)**2),t=0..pi/2)\n*** Notice that argument must be m1 = 1-m ***"
#define erf_doc "erf(x) returns the error function defined as\n2/sqrt(pi) * integral(exp(-t**2 / 2),t=0..x)"
#define erfc_doc "erfc(x) returns 1 - erf(x)."
#define exp10_doc "exp10(x) returns 10 raised to the x power."
#define exp2_doc "exp2(x) returns 2 raised to the x power."
#define expm1_doc "expm1(x) calculates exp(x) - 1 for use when x is near zero."
#define expn_doc "expn(n,x) return the exponential integral for integer n and\nnon-negative x and n: integral(exp(-x*t) / t**n, t=1..inf)."
#define fdtr_doc "fdtr(df1,df2,x) returns the area from zero to x under the F density\nfunction (also known as Snedcor's density or the variance ratio\ndensity).  This is the density of X = (u1/df1)/(u2/df2), where u1 and\nu2 are random variables having Chi square distributions with df1 and\ndf2 degrees of freedom, respectively."
#define fdtrc_doc "fdtrc(df1,df2,x) returns the area from x to infinity under the F\ndensity function."
#define fdtri_doc "fdtri(df1,df2,p) finds the F density argument x such that the\nintegral from x to infinity of the F density is equal to the given\nprobability p."
#define fresnl_doc "fresnl(x) returns the fresnel sin and cos integrals: integral(sin(pi/2\n* t**2),t=0..x) and integral(cos(pi/2 * t**2),t=0..x)."
#define gamma_doc "gamma(x) returns the gamma function of the argument.  The gamma\nfunction is often referred to as the generalized factorial since\nx*gamma(x) = gamma(x+1) and gamma(n+1) = n! for nonnegative n."
#define gdtr_doc "gdtr(a,b,x) returns the integral from zero to x of the gamma\nprobability density function: a**b / gamma(b) * integral(t**(b-1) exp(-at),t=0..x)"
#define gdtrc_doc "gdtrc(a,b,x) returns the integral from x to infinity of the gamma\nprobability density function."
#define hankel1_doc "hankel1(v,z) returns the Hankel function of the first kind for real order v and complex argument z."
#define hankel1e_doc "hankel1e(v,z) returns the exponentially scaled Hankel function of the first\nkind for real order v and complex argument z:\nhankel1e(v,z) = hankel1(v,z) * exp(-1j * z)"
#define hankel2_doc "hankel2(v,z) returns the Hankel function of the second kind for real order v and complex argument z."
#define hankel2e_doc "hankel2e(v,z) returns the exponentially scaled Hankel function of the second\nkind for real order v and complex argument z:\nhankel1e(v,z) = hankel1(v,z) * exp(1j * z)"
#define hyp1f1_doc "hyp1f1(a,b,x) returns the confluent hypergeometeric function\n( 1F1(a,b;x) ) evaluated at the values a, b, and x."
#define hyp1f2_doc "hyp1f2(a,b,c,x) returns (y,err) with the hypergeometric function 1F2 in y and an error estimate in err."
#define hyp2f0_doc "hyp2f0(a,b,x,type) returns (y,err) with the hypergeometric function 2F0 in y and an error estimate in err.  The input type determines a convergence factor and\ncan be either 1 or 2."
#define hyp2f1_doc "hyp2f1(a,b,c,x) returns the gauss hypergeometric function\n( 2F1(a,b;c;x) )."
#define hyp3f0_doc "hyp3f0(a,b,c,x) returns (y,err) with the hypergeometric function 3F0 in y and an error estimate in err."
#define i0_doc "i0(x) returns the modified Bessel function of order 0 at x."
#define i0e_doc "i0e(x) returns the exponentially scaled modified Bessel function\nof order 0 at x.  i0e(x) = exp(-|x|) * i0(x)."
#define i1_doc "i1(x) returns the modified Bessel function of order 1 at x."
#define i1e_doc "i1e(x) returns the exponentially scaled modified Bessel function\nof order 0 at x.  i1e(x) = exp(-|x|) * i1(x)."
#define igam_doc "igam(a,x) returns the incomplete gamma integral defined as\n1 / gamma(a) * integral(exp(-t) * t**(a-1), t=0..x).  Both arguments\nmust be positive."
#define igamc_doc "igamc(a,x) returns the complemented incomplete gamma integral\ndefined as 1 / gamma(a) * integral(exp(-t) * t**(a-1), t=x..inf) = 1 -\nigam(a,x).  Both arguments must be positive."
#define igami_doc "igami(a,y) returns x such that igamc(a,x) = y.  k must be a\nnonnegative integer."
#define incbet_doc "incbet(a,b,x) returns the incomplete beta integral of the\narguments, evaluated from zero to x: gamma(a+b) / (gamma(a)*gamma(b))\n* integral(t**(a-1) (1-t)**(b-1), t=0..x)."
#define incbi_doc "incbi(a,b,y) returns x such that incbet(a,b,x) = y."
#define iv_doc "iv(v,z) returns the modified Bessel function of real order v of\nz.  If z is of real type and negative, v must be integer valued."
#define ive_doc "ive(v,z) returns the exponentially scaled modified Bessel function of \nreal order v and complex z: ive(v,z) = iv(v,z) * exp(-abs(z.real))"
#define j0_doc "j0(x) returns the Bessel function of order 0 at x."
#define j1_doc "j1(x) returns the Bessel function of order 1 at x."
#define jn_doc "jn(n,x) returns the Bessel function of integer order n at  x."
#define jv_doc "jv(v,z) returns the Bessel function of real order v at complex z."
#define jve_doc "jve(v,z) returns the exponentially scaled Bessel function of real order\nv at complex z: jve(v,z) = jv(v,z) * exp(-abs(z.imag))"
#define k0_doc "i0(x) returns the modified Bessel function of the third kind of\norder 0 at x."
#define k0e_doc "k0e(x) returns the exponentially scaled modified Bessel function\nof the third kind of order 0 at x.  k0e(x) = exp(x) * k0(x)."
#define k1_doc "i1(x) returns the modified Bessel function of the third kind of\norder 1 at x."
#define k1e_doc "k1e(x) returns the exponentially scaled modified Bessel function\nof the third kind of order 1 at x.  k1e(x) = exp(x) * k1(x)"
#define kn_doc "kn(n,x) returns the modified Bessel function of the third kind for\ninteger order n at x."
#define kolmogorov_doc "kolmogorov(y) returns Kolmogorov's limiting distribution of a\ntwo-sided test or probability that sqrt(n) * max deviation > y."
#define kolmogorovi_doc "kolmogorovi(p) returns y such that kolmogorov(y) = p"
#define kv_doc "kv(v,z) returns the modified Bessel function of the third kind for\nreal order v at complex z."
#define kve_doc "kve(v,z) returns the exponentially scaled, modified Bessel function\nof the third kind for real order v at complex z: kve(v,z) = kv(v,z) * exp(z)"
#define lbeta_doc "lbeta(a,b) returns the natural logarithm of the absolute value of\nbeta: ln(|beta(x)|)."
#define lgam_doc "lgam(x) returns the base e logarithm of the absolute value of the\ngamma function of x: ln(|gamma(x)|)"
#define log1p_doc "log1p(x) calculates log(1+x) for use when x is near zero."
#define nbdtr_doc "nbdtr(k,n,p) returns the sum of the terms 0 through k of the\nnegative binomial distribution: sum((n+j-1)Cj p**n (1-p)**j,j=0..k).\nIn a sequence of Bernoulli trials this is the probability that k or\nfewer failures precede the nth success."
#define nbdtrc_doc "nbdtrc(k,n,p) returns the sum of the terms k+1 to infinity of the\nnegative binomial distribution."
#define nbdtri_doc "nbdtri(k,n,y) finds the argument p such that nbdtr(k,n,p) is equal\nto y."
#define ndtr_doc "ndtr(x) returns the area under the Gaussian probability density\nfunction, integrated from minus infinity to x:\n1/sqrt(2*pi) * integral(exp(-t**2 / 2),t=-inf..x)"
#define ndtri_doc "ndtri(y) returns the argument x for which the area udnder the\nGaussian probability density function (integrated from minus infinity\nto x) is equal to y."
#define pdtr_doc "pdtr(k,m) returns the sum of the first k terms of the Poisson\ndistribution: sum(exp(-m) * m**j / j!, j=0..k) = igamc( k+1, m).\nArguments must both be positive and k an integer."
#define pdtrc_doc "pdtr(k,m) returns the sum of the terms from k+1 to infinity of the\nPoisson distribution: sum(exp(-m) * m**j / j!, j=k+1..inf) = igam( k+1, m).\nArguments must both be positive and k an integer."
#define pdtri_doc "pdtri(k,y) returns the Poisson variable x such that the integral\nfrom 0 to x of the Poisson density is equal to the given probability\ny:  calculated by igami( k+1, y).  k must be a nonnegative integer and\ny between 0 and 1."
#define psi_doc "psi(x) is the logarithmic derivative of the gamma function\nevaluated at x."
#define radian_doc "radian(d,m,s) returns the angle given in (d)egrees, (m)inutes, and\n(s)econds in radians."
#define rgamma_doc "rgamma(x) returns one divided by the gamma function of x."
#define round_doc "Returns the nearest integer to x as a double precision\nfloating point result.  If x ends in 0.5 exactly, the\nnearest even integer is chosen."
#define shichi_doc "shichi(x) returns the hyperbolic sine and cosine integrals:\nintegral(sinh(t)/t,t=0..x) and eul + ln x +\nintegral((cosh(t)-1)/t,t=0..x) where eul is Euler's Constant."
#define sici_doc "sici(x) returns in si the integral of the sinc function from 0 to x:\nintegral(sin(t)/t,t=0..x).  It returns in ci the cosine integral: eul + ln x +\nintegral((cos(t) - 1)/t,t=0..x)."
#define sindg_doc "sindg(x) calculates the sine of the angle x given in degrees."
#define smirnov_doc "smirnov(n,e) returns the exact Smirnov statistic for a one-sided\ntest equal to the probability that the maximum difference between a\ntheoretical distribution and an empirical one based on n samples is\ngreater that e."
#define smirnovi_doc "smirnovi(n,y) returns e such that smirnov(n,e) = y."
#define spence_doc "spence(x) returns the dilogarithm integral: -integral(log t /\n(t-1),t=1..x)"
#define stdtr_doc "stdtr(k,t) returns the integral from minus infinity to t of the Student t\ndistribution with integer k > 0 degrees of freedom:\ngamma((k+1)/2)/(sqrt(k*pi)*gamma(k/2)) *\nintegral((1+x**2/k)**(-k/2-1/2),x=-inf..t)"
#define stdtri_doc "stdtri(k,p) returns the argument t such that stdtr(k,t) is equal to p."
#define struve_doc "struve(v,x) returns the Struve function Hv(x) of order v at x, x\nmust be positive unless v is an integer."
#define tandg_doc "tandg(x) calculates the tangent of the angle x given in degrees."
#define wofz_doc "wofz(z) returns the value of the faddeeva function for complex argument\nz: exp(-z**2)*erfc(-i*z)"
#define y0_doc "y0(x) returns the Bessel function of the second kind of order 0 at x."
#define y1_doc "y1(x) returns the Bessel function of the second kind of order 1 at x."
#define yn_doc "yn(n,x) returns the Bessel function of the second kind of integer\norder n at x."
#define yv_doc "yv(v,z) returns the Bessel function of the second kind of real\norder v at complex z."
#define yve_doc "yve(v,z) returns the exponentially scaled Bessel function of the second \nkind of real order v at complex z: yve(v,z) = yv(v,z) * exp(-abs(z.imag))"
#define zeta_doc "zeta(x,q) returns the Riemann zeta function of two arguments:\nsum((k+q)**(-x),k=0..inf)"
#define zetac_doc "zetac(x) returns the Riemann zeta function: sum(k**(-x), k=2..inf)"
