Building SciPy on Windows.

First, if your interested in getting going as fast as possible with
SciPy, I'd recommend you grab <this> nice click-installation package
instead of trying to build it from scracth.  You only need all these
tools if your interested in mucking around with SciPy's internals or
rebuilding it.  That said, all of scipy requires (1) and (2), and the
scipy.compiler module requires the gcc package discussed in (3), so
you'll likely need to grab these three things unless you already have
them.

What you need:

1. <Python2.1.1=http://www.python.org/ftp/python/2.1.1/Python-2.1.1c1.exe>
   or
   <ActivePython2.1=http://aspn.activestate.com/ASPN/Downloads/ActivePython/Download?OS=Windows&version=2.1.0&build=211&download=/ActivePython/windows/2.1/ActivePython-2.1.0.msi>

    You need Python 2.1 or higher.  ActiveState Python comes with some
    nice extra packages bundled in (PythonWin sets the standard for
    freely available interpreters), but all of these things are also
    available from www.python.org.  You just have to click-install a
    few more times.
    
    Python 2.0 may also work, but we haven't tested it and will
    pretend we didn't hear you if you ask a question about it.  I know
    Python 1.52 won't work.

2. <Numeric 20=http://prdownloads.sourceforge.net/numpy/Numeric-20.0.0.win32-py2.1.exe> or higher

    This is the core to Numeric computing in Python.  SciPy relies
    heavily on it.  You'll probably also want to get may also want to
    get the
    <fftpack=http://prdownloads.sourceforge.net/numpy/FFTPACK-3.0.win32-py2.1.exe>
    module, although scipy has its own fft module, and the 
    <random = http://prdownloads.sourceforge.net/numpy/RNG-3.0.win32-py2.1.exe>
    package for random variable functions.
    
3. <gcc -- mingw32=ftp://ftp.xraylith.wisc.edu/pub/khan/gnu-win32/mingw32/gcc-2.95.2/gcc-2.95.2-msvcrt.exe>

   This is a click-install package from Mumit Khan's site that
   includes the entire tool set(gcc, make, g77, nm, ar, etc) you'll
   need for building SciPy. It lives in my c:\gcc-2.95.2 directory,
   and you need to edit your environment to include this in your path.
   For instructions on how to do this are here <w2k>, <w98>.  This is
   a pretty old version (1999), but it works fine for me.  Its been
   tested on Windows 2000 and windows 98 successfully.
   
   There is a <newer version=http://prdownloads.sourceforge.net/mingw/mingw-1.0-20010608.tar.gz>
   from sourceforge.  Please let us know if you try this out.  Also be
   aware that you need a patch if you use this on a win 9x machine.
   
   Why aren't we using MSVC++?  The main reason is it doesn't come
   with a fortran compiler, and scipy has *a lot* of fortran code in
   it.  It is possible that MSVC+Absoft or MSVC+Intel could get the
   job done, but we haven't checked this out.  For those of you who
   only build things if they come with a .dsw or .dsp file, I'm sorry.
   I like working in the Visual Studio IDE to (outside of it, I'm
   reduced to printf for debugging).  Figure out a way to do it, and
   we'll put gladly give it a home.  For now, setup.py is the only way
   to go (but its pretty dang good if you ask me).
   
   By the way, this'll work with ActiveState Python or Python built
   with MSVC.  The original Python *does not* have to be built using
   gcc (thanks to lib2def.py by <Robert Kern=mailto:kern@caltech.edu>).

4. <fftw libraries=my library link> -- fastest fourier transform in the west librareis

    Unpack this file in your C:\ directory, as this is where scipy's
    setup.py file expects to find it. <These guys=http://www.fftw.org>
    don't seem so fond of Mr. Gates, so the Windows build process
    isn't straight forward. The standard Unix build process works in
    cygwin, but the resulting library will be dependent on the
    cygwin.dll.  I couldn't get the -mno-cygwin flag to work, nor
    could I get things to behave when I set gcc to the mingw32
    compiler.  Instead, I've put together a simple makefile and
    config.h file that build all the libraries on windows using the
    mingw32 tool chain discussed in (3). A source distrobution for
    this is <here>.

5.  <atlas>  -- self-tuning version of blas and lapack routines

    Actually, you don't really need these yet, but you soon will when
    the linalg module is finished. Be the first one on your block to
    own them!  Again, I've made a zip file of these little <gems> that
    you can unpack in your C:\ directory.  That's where (a future
    version of) setup.py expects to find them.
    
Getting SciPy:

6.  <SciPy Source>
    This is currently *very* alpha code, so please, 
    <be patient=need depressing black-and-white picture of people standing in a bread line>,
    <report bugs= bug page>, and don't use it in 
    <air traffic control software=http://groups.google.com/groups?hl=en&lr=lang_en&safe=off&th=d3460cb8b82dc6d,129&start=0>.
    Unpack this zip file in c:\temp, or some other temporary place,
    and then execute the setup.py file( Assuming you've installed (1)
    through (5)).  This is much like a makefile for the Unix geeks in
    the crowd, but it is "Python-aware" and handles all versioning and
    installation path issues automatically.
    
        c:\> cd c:\temp\scipy
        c:\> python setup.py build
        << runs for maybe 10 minutes and spews a ton of warnings >>
        c:\> python setup.py install
        << runs for maybe a minute copying files into the home python directory >>

    For those who want to be on the bleeding edge, you can also check
    the latest snapshot of SciPy out of the <CVS repository=http://scipy.org/download/CVSInstruct>
    
7. Testing SciPy
    
    Python comes with some unit tests and the numbers are growing
    every day (well monthly anyway). To test your installation use
    scipy.test(1) to test the quick sub-set of all tests or
    scipy.test(10) to run all available tests.  The first should take
    less than one second, the second will take minutes, depending on
    your processor speed because it includes the scipy.compiler tests
    which give gcc a major workout.
    
        c:> python
        ...
        >>> import scipy
        >>> scipy.test(1)
        No test suite found for  scipy.build_flib
        No test suite found for  scipy.data_store
        No test suite found for  scipy.doctest
        No test suite found for  scipy.dumbdbm_patched
        No test suite found for  scipy.dumb_shelve
        No test suite found for  scipy.fortran_support
        No test suite found for  scipy.helpmod
        creating test suite for: scipy.limits
        creating test suite for: scipy.misc
        No test suite found for  scipy.proc
        No test suite found for  scipy.scipy_tempfile
        No test suite found for  scipy.scipy_test
        No test suite found for  scipy.sync
        No test suite found for  scipy.cluster
        No test suite found for  scipy.cow
        No test suite found for  scipy.fft
        No test suite found for  scipy.ga
        No test suite found for  scipy.integrate
        No test suite found for  scipy.interpolate
        No test suite found for  scipy.io
        No test suite found for  scipy.optimize
        No test suite found for  scipy.signal
        No test suite found for  scipy.special
        No test suite found for  scipy.stats
        .............................................................
        ----------------------------------------------------------------------
        Ran 61 tests in 0.060s
        
        OK
        <unittest.TextTestRunner instance at 007E6D84>
        >>>

        If any tests fail, please report them to the <bugs list>, and
        include the output in your posting.
        
8. <Mailing Lists=http://scipy.org/MailList> 

   Subscribing to the developer or user mailing lists will keep you up
   with SciPy's latest happenings.

